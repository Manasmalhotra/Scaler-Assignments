Problem Description
Given an array of integers A and multiple values in B, which represents the number of times array A needs to be left rotated.

Find the rotated array for each value and return the result in the from of a matrix where ith row represents the rotated array for the ith value in B.

Problem Constraints
1 <= length of both arrays <= 2000 -10^9 <= A[i] <= 10^9 0 <= B[i] <= 2000

TESTCASES: 

k=0 arr[]={1,2,3,4,5} 
Ans= {1,2,3,4,5}

k=1 arr[]={1,2,3,4,5,6}      6,5,4,3,2,1 ==>  Reverse(6,5,4,3,2) & Reverse(1) ==>2,3,4,5,6,1
Ans= {2,3,4,5,6,1}

k=2 arr[]={1,2,3,4,5,6}     6,5,4,3,2,1 ==> Reverse(6,5,4,3} & Reverse(2,1) ===> 3,4,5,6,1,2 Therefore we can say that reverse 0 to n-1-k & n-k to n-1 
Ans= {3,4,5,6,1,2}           

void reverse(vector<int>&A,int l,int r){
    int temp;
    while(l<r){
        temp=A[l];
        A[l]=A[r];
        A[r]=temp;
        l++;
        r--;
    }
}

void rotate(vector<vector<int> >&result,vector<int>A,int k){
    int n=A.size();
    reverse(A,0,n-1);
    reverse(A,0,n-1-k);
    reverse(A,n-k,n-1);
    result.push_back(A);
}

vector<vector<int> > Solution::solve(vector<int> &A, vector<int> &B) {
   vector<vector<int> >result;
   int n=B.size(),m=A.size();
   for(int i=0;i<n;i++){
       B[i]=B[i]%m;
       if(B[i]==0){
           result.push_back(A);
       }
       else{
       rotate(result,A,B[i]);
       }
   }
   return result;
}
