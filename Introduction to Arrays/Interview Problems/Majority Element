Given an array of size N, find the majority element. The majority element is the element that appears more than floor(n/2) times.
You may assume that the array is non-empty and the majority element always exists in the array.

Simple Solution: 

int Solution::majorityElement(const vector<int> &A) {
  int i,n=A.size();
  map<int,int>maps;
  for(i=0;i<n;i++){
     maps[A[i]]+=1;
     if(maps[A[i]]>n/2){
         return A[i];
     }
  }
   return -1; 
}

TC: O(N) SC:O(N)

Moore Voting Algorithm

2 2 1 3 2 ==> Here though the earlier frequencies of 2 ar cancelled out but the last 2 make it win.

3 3 1 2 ==> 2 will be answer here but we can see majority element does not exist here.So if it is not give in question that there is a gurntee of majority elemnt thenwe need to check.

7 8 7 7 1 ===> Here count of 7 does not become 0 at end so it is the majority element.

Overall, we can say that if majority element ispresent it will be there in the answer as its count will over power others due fact that freq(majority)>n/2

int Solution::majorityElement(const vector<int> &A) {
int i=0,n=A.size();
int major=A[0],count=1;
for(i=1;i<n;i++){
   if(major==A[i]){
       count++;
   }
   else{
       count--;
   }
   if(count==0){
       major=A[i];
       count=1;
   }
}
    return major;
}



