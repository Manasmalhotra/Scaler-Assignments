Problem Description
Given two binary strings, return their sum (also a binary string).

// Simple solution considering all possible cases with a addition of 2 bits and a carry
string Solution::addBinary(string A, string B) {
    int i,j,n=A.length(),m=B.length();
    string res="";
    char carry='0';
    i=n-1;
    j=m-1;

    while(i>=0  && j>=0){
        if(A[i]=='1' && B[j]=='1' && carry=='1'){
           res+=A[i];
           carry='1';                                        // Observe here result always adds up carry when both of nos as set bit.
        }
        else if(A[i]=='1' && B[j]=='1' && carry=='0'){
            res+='0';
            carry='1';
        }
        else if(A[i]=='1' || B[j]=='1'){
            if(carry=='1'){
                res+='0';                    //observe here res always has 1-carry added and carry remains the same;
                carry='1';
            }
            else{
                res+='1';
                carry='0';
            }
        }

        else{
            res+=carry;
            carry='0';
        }
        i--;
        j--;
    }
    while(i>=0){
        if(carry=='1'){
            if(A[i]=='1'){
                res+='0';
                carry='1';
            }
            else{
                res+='1';
                carry='0';
            }
        }
        else{
            res+=A[i];
        }
        i--;
    }

    while(j>=0){
        if(carry=='1'){
            if(B[j]=='1'){
                res+='0';
                carry='1';
            }
            else{
                res+='1';
                carry='0';
            }
        }
        else{
            res+=B[j];
        }
        j--;
    }
    if(carry=='1'){
        res+=carry;
    }
    reverse(res.begin(),res.end());
    return res;
}

Better Code


string Solution::addBinary(string A, string B) {
    int i,j,n=A.length(),m=B.length();
    string res="";
    char carry='0';
    i=n-1;
    j=m-1;

    while(i>=0  && j>=0){
        if(A[i]=='1' && B[j]=='1'){
           res+=carry;
           carry='1';
        }

        else if(A[i]=='1' || B[j]=='1'){
           
           res+=to_string('1'-carry);
        }

        else{
            res+=carry;
            carry='0';
        }
        i--;
        j--;
    }

    while(i>=0){
        if(carry=='1'){
            res+=to_string('1'-A[i]);
            carry=A[i];
        }
        else{
            res+=A[i];
        }
        i--;
    }

    while(j>=0){
        if(carry=='1'){
            res+=to_string('1'-B[j]);
            carry=B[j];
        
        }
        else{
            res+=B[j];
        }
        j--;
    }
    
    if(carry=='1'){
        res+=carry;
    }
    reverse(res.begin(),res.end());
    return res;
}


BEST CODe

string Solution::addBinary(string A, string B) {
    int i,j,n=A.length(),m=B.length(),sum=0;
    string res="";
    int carry=0;
    i=n-1;
    j=m-1;
    while(i>=0 || j>=0 || carry){
         sum=carry;
        if(i>=0){sum+=(A[i]-'0');}
        if(j>=0){sum+=(B[j]-'0');}
        res.push_back((char)('0'+sum%2));
        carry=sum/2;
        i--;
        j--;
    }
    reverse(res.begin(),res.end());
    return res;
}

//This is also decimal addition is performed, only bases differ check notes for etter clarity.
