Problem Description
You have an array A with N elements. We have two types of operation available on this array :
We can split an element B into two elements, C and D, such that B = C + D.
We can merge two elements, P and Q, to one element, R, such that R = P ^ Q i.e., XOR of P and Q.
You have to determine whether it is possible to convert array A to size 1, containing a single element equal to 0 after several splits and/or merge?

Approach: This problem can appear to be tough at first sight, but the thing to observe here is that we can reduce the given thing to zero only through xor operation
          and not through any split up.
          And to make xor equals to zero we have to split the given numbers such that the final list has all elemnets occuring twice.
          Therefore we can say that the sum of all elemnets present in the array should be even because if it is even then only it could be split into even parts right?
          As odd=even+odd Therefore if sum of elements will be odd we have no chace to split it into parts with even frequency.
          
Therefore if sum is even the answer should be yes else no.

TC: O(N) SC:O(1)

string Solution::solve(vector<int> &A) {
int i=0,n=A.size(),sum=0;
for(i=0;i<n;i++){
    sum+=A[i];
}
if(sum%2==0){
    return "Yes";
}
else{
    return "No";
}
}

