Problem Description
Give a N * N square matrix A, return an array of its anti-diagonals. Look at the example for more details.


Problem Constraints
1<= N <= 1000
1<= A[i][j] <= 1e9

Approach 

[[1 2 3]
[4 5 6]
[7 8 9]]

Anti Diagonal goes like this.. 1 then second row: 2 4 then third row: 3 5 7 then 6 8 then 9. It goes from right to left covering each of the elements.
So the first approach that came into mind was to traverse the matrix and store elements we got in a array then paste this aaray as a row of matrix.

The second aproach what I got was instead of using this extra array why don't we push the elements from one matrix to the other.


vector<vector<int> > Solution::diagonal(vector<vector<int> > &A) {
    int i,j,n=A.size();
    vector<vector<int> >result;

    for(j=0;j<n;j++){
        int k=j,ptr=0;
        vector<int>ans(n,0);
        for(i=0;i<n;i++){
            if(k<0){
                break;
            }
            ans[ptr]=A[i][k];
            ptr++;
            k--;
        }
        result.push_back(ans);
    }
    for(i=1;i<n;i++){
      int k=i,ptr=0;
      vector<int>ans(n,0);
      for(j=n-1;j>=0;j--){
          if(k>=n){
              break;
          }
          ans[ptr]=A[k][j];
          ptr++;
          k++;
      }
      result.push_back(ans);
    }

    return result;
}


//Approach 2

vector<vector<int> > Solution::diagonal(vector<vector<int> > &A) {
    int i,j,n=A.size(),R=0,C=0,row,col;
    vector<vector<int> >mat(2*n-1,vector<int>(n,0));
    for(j=0;j<n;j++){
        col=j;
        row=0;
        while(col>=0 && row<n){
            mat[R][C]=A[row][col];
            col--;
            row++;
            C++;
        }
        R++;
        C=0;
    }

    for(i=1;i<n;i++){
        col=n-1;
        row=i;
        while(col>=0 && row<n){
            mat[R][C]=A[row][col];
            col--;
            row++;
            C++;
        }
        R++;
        C=0;
    }

    return mat;
}
