Problem Description
Given an array A, find the size of the smallest subarray such that it contains at least one occurrence of the maximum value of the array

and at least one occurrence of the minimum value of the array.



Problem Constraints
1 <= |A| <= 2000

Brute Force
//Just doing what is asked in the question.. find min and maxx then iterate the array if you find max then traverse from i+1 to get minn as soon as u get min
// break from the loop so as to minimise the array length.

int Solution::solve(vector<int> &arr) {
    int i,j,n=arr.size(),maxx=INT_MIN,minn=INT_MAX,f=0;
    int ans=n;

    for(i=0;i<n;i++){
        if(maxx<arr[i]){
            maxx=arr[i];
        }
        if(minn>arr[i]){
            minn=arr[i];
        }
    }
    if(maxx==minn){
        return 1;
    }

    for(i=0;i<n;i++){
        if(arr[i]==maxx){
            for(j=i+1;j<n;j++){
               if(arr[j]==minn){
                   f=1;
                   break;
               }
            }
            if(f){
              ans=min(ans,j-i+1);
              f=0;
            }
        }

        if(arr[i]==minn){
           for(j=i+1;j<n;j++){
               if(arr[j]==maxx){
                   f=1;
                   break;
               }
            }
            if(f){
              ans=min(ans,j-i+1);
              f=0;
            }
        }
    }
    return ans;
}

Efficient solution: Can we maintain the last seen minimum/maximum element index? if we update the just seen maxx/minn index we can get the length..

public class Solution {
    public int solve(int[] A) {
        int i,maxi=-1,mini=-1,n=A.length,maxx=A[0],minn=A[0];
        int ans=n;

        for(i=1;i<n;i++){
            if(maxx<A[i]){
                maxx=A[i];
            }
            if(minn>A[i]){
                minn=A[i];
            }
        }
        if(maxx==minn){
            return 1;
        }
        else{
            for(i=0;i<n;i++){
                if(A[i]==maxx){
                    maxi=i;
                    if(mini!=-1){
                        ans=Math.min(ans,maxi-mini+1);
                    }
                }
                else if(A[i]==minn){
                    mini=i;
                    if(maxi!=-1){
                        ans=Math.min(ans,mini-maxi+1);
                    }
                }
            }
        }
        return ans;
    }
}

TC: O(N) SC:O(1)
