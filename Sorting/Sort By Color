Problem Description
Given an array with N objects colored red, white, or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent red, white, and blue, respectively.

Note: Using the library sort function is not allowed.

Approach 1: Implement a sorting technique.

bool compare(int a,int b){
    if(a>b){
        return true;
    }
    return false;
}

vector<int> Solution::sortColors(vector<int> &A) {
  int i,j,n=A.size();
  for(i=0;i<n;i++){
      for(j=0;j<n-1;j++){
          if(compare(A[j],A[j+1])==true){
              swap(A[j],A[j+1]);
          }
      }
  }
  return A;  
}

Approach 2: count number of 0s,1s and 2s and then insert in the array accordingly.
TC: O(N) SC:O(1)

vector<int> Solution::sortColors(vector<int> &A) {
    int count0=0,count1=0,count2=0,i,n=A.size();
    for(i=0;i<n;i++){
        if(A[i]==0){
            count0++;
        }
        else if(A[i]==1){
            count1++;
        }
        else{
            count2++;
        }
    }

    for(i=0;i<count0;i++){
        A[i]=0;
    }
    for(i=count0;i<count0+count1;i++){
        A[i]=1;
    }
    for(i=count0+count1;i<count1+count0+count2;i++){
        A[i]=2;
    }
    return A;
}

Approach 3: Dutch Flag
Ex: 0 1 2 0 1 2
low=0,mid=0,high=n-1;
As A[mid]=0 swap(A[mid],A[left]),mid++,left++
2nd: A[mid]==1 so mid++
3rd: A[mid]==2 Therefore swap A[mid] and A[high] and high--; Here we do not modify mid because A[high] from which we swapped can be 0 also which will need further swaps.
Similarly the process gets on and array gets sorted.


vector<int> Solution::sortColors(vector<int> &A) {
int n=A.size(),mid=0,left=0,right=A.size()-1;
while(mid<=right){
    if(A[mid]==0){
        swap(A[left],A[mid]);
        mid++;
        left++;
    }
    else if(A[mid]==1){
        mid++;
    }
    else{
        swap(A[right],A[mid]);
        right--;
    }
}
return A;
}
