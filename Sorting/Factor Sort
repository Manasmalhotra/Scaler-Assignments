Problem Description
You are given an array A of N elements. Sort the given array in increasing order of number of distinct factors of each element,
i.e., element having the least number of factors should be the first to be displayed and the number having highest number of factors should be the last one.
If 2 elements have same number of factors, then number with less value should come first.

Note: You cannot use any extra space

//Use a compare function, and sort the elements basis the number of factors by:a) Calculating number of factors for each number each time it is encountered.
b) Pre compute the factors.


int factors(int n){
    int i,count=0;

    for(i=1;i*i<=n;i++){
        if(n%i==0){
            if(i*i==n){
                count+=1;
            }
            else{
                count+=2;
            }
        }
    }
    return count;
}

bool compare(int a,int b){
    int x=factors(a);
    int y=factors(b);
    if(x<y){
        return true;
    }
    else if(x==y){
        if(a<b){
            return true;
        }
    }
    return false;
}
vector<int> Solution::solve(vector<int> &A) {
    sort(A.begin(),A.end(),compare);
    return A;
}

//Optimized for large inputs

vector<int>prime(10001,1);

bool compare(int a,int b){
    if(prime[a]==prime[b]){
        return a<b;
    }
    return prime[a]<prime[b];
}


vector<int> Solution::solve(vector<int> &A) {
    prime[0]=0;
    int i,j;

    for(i=2;i<=10000;i++){
       for(j=i;j<=10000;j+=i){
           prime[j]+=1;
       }
    }
    sort(A.begin(),A.end(),compare);
    return A;
}

