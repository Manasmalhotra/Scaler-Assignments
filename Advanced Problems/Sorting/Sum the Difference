Problem Description
Given an integer array, A of size N.
You have to find all possible non-empty subsequences of the array of numbers and then, for each subsequence, find the difference between the largest and smallest numbers in that subsequence. Then add up all the differences to get the number.

As the number may be large, output the number modulo 1e9 + 7 (1000000007).

NOTE: Subsequence can be non-contiguous.



Problem Constraints
1 <= N <= 10000

1<= A[i] <=1000

long pow(int a,int b,int c){
    if(a==0){
        return 0;
    }
    if(b==0 || a==1){
        return 1;
    }

    long p=pow(a,b/2,c);
    if(b&1==1){
        return (a*(p*p)%c)%c;
    }
    return (p*p)%c;
}

int Solution::solve(vector<int> &A) {
    int i,n=A.size();
    long long sum=0,mod=1e9+7;
    sort(A.begin(),A.end());
    for(i=0;i<n;i++){
        sum=(sum%mod +(A[i]*pow(2,i,mod))%mod)%mod;
        sum=(sum%mod - (A[i]*pow(2,n-1-i,mod))%mod + mod)%mod;
    }
    return sum;
}
Approach

1 2 3 4 5 6 11
For 4 to be max: fix 4. Get number of subsequences possible for 1,2,3 as 4 is fixed.
For 4 to be min: fix 4. get number of subsequences possible for 5,6,11.
