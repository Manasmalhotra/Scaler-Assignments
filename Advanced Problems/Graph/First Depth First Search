Problem Description
You are given N towns (1 to N). All towns are connected via unique directed path as mentioned in the input.

Given 2 towns find whether you can reach the first town from the second without repeating any edge.

B C : query to find whether B is reachable from C.

Input contains an integer array A of size N and 2 integers B and C ( 1 <= B, C <= N ).

There exist a directed edge from A[i] to i+1 for every 1 <= i < N. Also, it's guaranteed that A[i] <= i for every 1 <= i < N.

NOTE: Array A is 0-indexed. A[0] = 1 which you can ignore as it doesn't represent any edge.



Problem Constraints
1 <= N <= 100000



Input Format
First argument is vector A

Second argument is integer B

Third argument is integer C



Output Format
Return 1 if reachable, 0 otherwise.



Example Input
Input 1:

 A = [1, 1, 2]
 B = 1
 C = 2
Input 2:

 A = [1, 1, 2]
 B = 2
 C = 1


Example Output
Output 1:

 0
Output 2:

 1
 
 Approach1: DFS
 
 void dfs(vector<int>adj[],vector<int>&vis,int source){
    if(vis[source]==1){
        return;
    }
    vis[source]=1;

    int i,n=adj[source].size();
    for(i=0;i<n;i++){
        if(vis[adj[source][i]]==0){
            dfs(adj,vis,adj[source][i]);
        }
    }
}

int Solution::solve(vector<int> &A, const int B, const int C) {
    int i,n=A.size();
    vector<int>adj[n+1];
    for(i=1;i<n;i++){
        adj[A[i]].push_back(i+1);
    }
    vector<int>vis(n+1,0);
    dfs(adj,vis,C);
    return vis[B];
}

Approach 2: BFS
 
 int Solution::solve(vector<int> &A, const int B, const int C) {
    int i,n=A.size();
    vector<int>adj[n+1];
    for(i=1;i<n;i++){
        adj[A[i]].push_back(i+1);
    }
    vector<int>vis(n+1,0);
    queue<int>q;
    q.push(C);
    
    int temp;
    while(!q.empty()){
        temp=q.front();
        q.pop();
        vis[temp]=1;
        for(i=0;i<adj[temp].size();i++){
            int v=adj[temp][i];
            if(vis[v]==0){
                vis[v]=1;
                q.push(v);
            }
        }
    }
    return vis[B];
}
