Problem Description
Given a matrix of integers A of size N x M consisting of 0 or 1.

For each cell of the matrix find the distance of nearest 1 in the matrix.

Distance between two cells (x1, y1) and (x2, y2) is defined as |x1 - x2| + |y1 - y2|.

Find and return a matrix B of size N x M which defines for each cell in A distance of nearest 1 in the matrix A.

NOTE: There is atleast one 1 is present in the matrix.



Problem Constraints
1 <= N, M <= 1000

0 <= A[i][j] <= 1

Input Format
The first argument given is the integer matrix A.


Output Format
Return the matrix B.

//Multi Source BFS
Start by pushing all 1s in the matrix, maintain a distance matrix which will also act as visited matrix if you initialise it with -1 as distance cannot be negative.
Since BFS proceeds by 1 step at a time considering its neighbours therefore it works here.


vector<vector<int> > Solution::solve(vector<vector<int> > &A) {
    int i,j,n=A.size(),m=A[0].size();
    vector<vector<int> >B(n,vector<int>(m,-1));
    queue<pair<int,pair<int,int> > >q;
    for(i=0;i<n;i++){
        for(j=0;j<m;j++){
            if(A[i][j]==1){
                q.push({i,{j,0}});
                B[i][j]=0;
            }
        }
    }
    vector<int>dirx={-1,0,0,1};
    vector<int>diry={0,-1,1,0};

    while(!q.empty()){
        pair<int,pair<int,int> >temp=q.front();
        q.pop();
        int row=temp.first;
        int col=temp.second.first;
        int dist=temp.second.second;
        for(i=0;i<4;i++){
            int newrow=row+dirx[i];
            int newcol=col+diry[i];
            if(newrow>=0 && newrow<n && newcol>=0 && newcol<m && B[newrow][newcol]==-1){
                q.push({newrow,{newcol,dist+1}});
                B[newrow][newcol]=dist+1;
            }
        }
    }
    return B;
}


//Modified Dijkstra

vector<vector<int> > Solution::solve(vector<vector<int> > &A) {
    int i,j,n=A.size(),m=A[0].size();
    vector<vector<int> >B(n,vector<int>(m,INT_MAX));
    queue<pair<int,int> >q;
    for(i=0;i<n;i++){
        for(j=0;j<m;j++){
            if(A[i][j]==1){
                q.push({i,j});
                B[i][j]=0;
            }
        }
    }
    vector<int>dirx={-1,0,0,1};
    vector<int>diry={0,-1,1,0};

    while(!q.empty()){
        pair<int,int>temp=q.front();
        q.pop();
        int row=temp.first;
        int col=temp.second;
        for(i=0;i<4;i++){
            int newrow=row+dirx[i];
            int newcol=col+diry[i];
            if(newrow>=0 && newrow<n && newcol>=0 && newcol<m && B[newrow][newcol]>B[row][col]+1){
                q.push({newrow,newcol});
                B[newrow][newcol]=B[row][col]+1;
            }
        }
    }
    return B;
}
