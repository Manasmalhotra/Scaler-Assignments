Problem Description

Given a matrix of integers A of size N x M consisting of 0, 1 or 2.

Each cell can have three values:

The value 0 representing an empty cell.

The value 1 representing a fresh orange.

The value 2 representing a rotten orange.

Every minute, any fresh orange that is adjacent (Left, Right, Top, or Bottom) to a rotten orange becomes rotten. Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1 instead.

Note: Your solution will run on multiple test cases. If you are using global variables, make sure to clear them.



Problem Constraints
1 <= N, M <= 1000

0 <= A[i][j] <= 2



Input Format
The first argument given is the integer matrix A.



Output Format
Return the minimum number of minutes that must elapse until no cell has a fresh orange.

If this is impossible, return -1 instead.



Example Input
Input 1:

A = [   [2, 1, 1]
        [1, 1, 0]
        [0, 1, 1]   ]
Input 2:

 
A = [   [2, 1, 1]
        [0, 1, 1]
        [1, 0, 1]   ]


Example Output
Output 1:

 4
Output 2:

 -1

Example Explanation
Explanation 1:

 Max of 4 using (0,0) , (0,1) , (1,1) , (1,2) , (2,2)
Explanation 2:

 Task is impossible
 
Approach: Mutli source BFS. Rottening starts to propagate at same time from all points.
TC:O(N*M)
SC: O(N*M)


int Solution::solve(vector<vector<int> > &A) {
    int i,j,n=A.size(),m=A[0].size();
    vector<vector<int> >time(n,vector<int>(m,0));
    queue<pair<int,int> >q;
    for(i=0;i<n;i++){
        for(j=0;j<m;j++){
            if(A[i][j]==2){
                q.push({i,j});
            }
        }
    }
    while(!q.empty()){
        pair<int,int>temp=q.front();
        q.pop();
        i=temp.first;
        j=temp.second;
        if(i-1>=0 && A[i-1][j]==1){
             time[i-1][j]=1+time[i][j];
             A[i-1][j]=2;
             q.push({i-1,j});
        }
        if(j-1>=0 && A[i][j-1]==1){
            time[i][j-1]=1+time[i][j];
            A[i][j-1]=2;
            q.push({i,j-1});
        }
        if(i+1<n && A[i+1][j]==1){
            time[i+1][j]=1+time[i][j];
            A[i+1][j]=2;
            q.push({i+1,j});
        }
        if(j+1<m && A[i][j+1]==1){
            time[i][j+1]=1+time[i][j];
            A[i][j+1]=2;
            q.push({i,j+1});
        }
    }
    
    int maxx=0;
    for(i=0;i<n;i++){
        for(j=0;j<m;j++){
            if(A[i][j]==1){
                return -1;
            }
            else{
                maxx=max(maxx,time[i][j]);
            }
        }
    }
    return maxx;
}

