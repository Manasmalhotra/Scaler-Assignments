Rearrange a given array so that Arr[i] becomes Arr[Arr[i]] with O(1) extra space.

Example:

Input : [1, 0]
Return : [0, 1]
Lets say N = size of the array. Then, following holds true :

All elements in the array are in the range [0, N-1]
N * N does not overflow for a signed integer


Approach: Brute Force
Take an auxillary array and store the result for each element there.

void Solution::arrange(vector<int> &A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    int i,n=A.size();
    vector<int>temp(n,0);
    for(i=0;i<n;i++){
        temp[i]=A[A[i]];
    }
    A=temp;
}

Optimised Approach: In O(1) Space.

25 hours  ===>1 day 1 hour==>25/24 & 25%24
70 hours ==> 2 day 22 hours ==> 70/24 && 70%24
Therefore a single data point can store multiple information. This is because here we know that a day can have 24 hours only so there is a range [1-24]

Also here also we have a range in question as 1-N-1 the elements do not exceeed this range. So if we take N as value to mod any of these we will get the number itself.
Formula : Arr[i]=old_value*N+new_value.
Now if we divide by N we will get old_value since new_value part cannot influence as it is range 1-N-1 and will always come as remainder.
Also we can extract new value by Arr[i]%N.

void Solution::arrange(vector<int> &A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    int i=0,n=A.size();
    for(i=0;i<n;i++){
        A[i]=(A[i]*n); //Multiply for first modification. Second modification is done afterwards to ensure that we do not take half preprocessed values like a value 
                        //coming later on can need a value that ha sbeen already modified by the formula. 
    }

    for(i=0;i<n;i++){
        A[i]=A[i]+(A[A[i]/n])/n; // Access old values.
    }

    for(i=0;i<n;i++){
        A[i]=A[i]%n;
    }
}
