Problem Description

Given a linked list **A**, remove the **B-th** node from the end of the list and return its head. For example, Given linked list: `1->2->3->4->5`, and `B = 2`. After removing the second node from the end, the linked list becomes `1->2->3->5`. **NOTE:** If **B** is greater than the size of the list, remove the first node of the list. **NOTE:** Try doing it using constant additional space.
Problem Constraints

1 <= |A| <= 106
Input Format

The first argument of input contains a pointer to the head of the linked list. The second argument of input contains the integer B.
Output Format

Return the head of the linked list after deleting the B-th element from the end.
Example Input

Input 1:
A = 1->2->3->4->5
B = 2

Example Output

Output 1:
1->2->3->5

ListNode* Solution::removeNthFromEnd(ListNode* A, int B) {
     if(A==NULL){
        return A;
    }
    int len=0;
    ListNode*temp=A;
    while(temp!=NULL){
        len+=1;
        temp=temp->next;
    }
    int pos=len-B;
    if(pos<=0){ //Condition given if question if B>length of LL delete head node.
        A=A->next;
    }
    else{
        int c=1;
        ListNode*t=A;
        while(c<pos){
            c+=1;
            t=t->next;
        }
        t->next=t->next->next;
    }
    return A;
}
