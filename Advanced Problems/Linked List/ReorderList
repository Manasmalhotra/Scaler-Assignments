Problem Description
Given a singly linked list A

 A: A0 → A1 → … → An-1 → An 
reorder it to:

 A0 → An → A1 → An-1 → A2 → An-2 → … 
You must do this in-place without altering the nodes' values.



Problem Constraints
1 <= |A| <= 106



Input Format
The first and the only argument of input contains a pointer to the head of the linked list A.



Output Format
Return a pointer to the head of the modified linked list.



Example Input
Input 1:

 A = [1, 2, 3, 4, 5] 
Input 2:

 A = [1, 2, 3, 4] 


Example Output
Output 1:

 [1, 5, 2, 4, 3] 
Output 2:

 [1, 4, 2, 3] 


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* reverse(ListNode*h){
    if(h==NULL || h->next==NULL){
        return h;
    }
    ListNode*rh=NULL,*t;

    while(h!=NULL){
    t=h;
    h=h->next;
    t->next=rh;
    rh=t;
    }
    return rh;
}
ListNode* Solution::reorderList(ListNode* A) {
    if(A==NULL || A->next==NULL){
        return A;
    }
    
    ListNode*p=A,*q=A;
    while(q!=NULL && q->next!=NULL){
        p=p->next;
        q=q->next->next;
    }
    
    ListNode*t=A,*temp,*h2=p->next;
    p->next=NULL;
    h2=reverse(h2);
    while(h2!=NULL){
       temp=h2->next;
       h2->next=t->next;
       t->next=h2;
       h2=temp;
       t=t->next->next;
    }
    return A;
}
