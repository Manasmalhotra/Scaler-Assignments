Problem Description
Given a sorted linked list, delete all duplicates such that each element appears only once.



Problem Constraints
0 <= length of linked list <= 106

Problem Constraints
0 <= length of linked list <= 106



Input Format
First argument is the head pointer of the linked list.



Output Format
Return the head pointer of the linked list after removing all duplicates.



Example Input
Input 1:

 1->1->2
Input 2:

 1->1->2->3->3


Example Output
Output 1:

 1->2
Output 2:

 1->2->3


Example Explanation
Explanation 1:

 Each element appear only once in 1->2.
 
 
 
 /**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 Approach: Skip all elements having same value as current element.
 TC:O(N): We traverse LL once.
 
ListNode* Solution::deleteDuplicates(ListNode* A) {
    if(A==NULL || A->next==NULL){
        return A;
    }
    ListNode*temp=A;
    while(temp!=NULL){
        int ele=temp->val;
        ListNode*t=temp;
        while(t!=NULL && t->val==ele){
            t=t->next;
        }
        temp->next=t;
        temp=t;
    }
    return A;
}
