For Proof please see the lecture pdf

Problem Description

Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Try solving it using constant additional space.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* Solution::detectCycle(ListNode* A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    if(A==NULL || A->next==NULL){
        return NULL;
    }
    ListNode*p=A,*q=A;
    while(q!=NULL && q->next!=NULL){
        p=p->next;
        q=q->next->next;
        if(p==q){
            break;
        }
    }
    if(q!=NULL && q->next!=NULL){
        ListNode*s1=A;
        ListNode*s2=q;
        while(s1!=s2){
            s1=s1->next;
            s2=s2->next;
        }
        return s1;
    }
    return NULL;
}
