//Sorting the list
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* merge(ListNode*h1,ListNode*h2){
    ListNode *h,*t;
    if(h1==NULL){
        return h2;
    }
    if(h2==NULL){
        return h1;
    }
    if(h1->val<h2->val){
        h=h1;
        t=h1;
        h1=h1->next;
    }
    else{
        h=h2;
        t=h2;
        h2=h2->next;
    }
    while(h1!=NULL && h2!=NULL){
        if(h1->val<h2->val){
            t->next=h1;
            h1=h1->next;
        }
        else{
            t->next=h2;
            h2=h2->next;
        }
        t=t->next;
    }

    if(h1!=NULL){
        t->next=h1;
    }
    else{
       t->next=h2;
    }
    return h;
}
ListNode*sortedList(ListNode*A){
    if(A==NULL || A->next==NULL){
        return A;
    }
    ListNode*p=A,*q=A;
    while(q->next!=NULL && q->next->next!=NULL){ /// Imp to return first middle in case of even length as 1->2. Thena ccessing 2->next is of no point.
        p=p->next;
        q=q->next->next;
    }
    ListNode*h2=p->next;
    p->next=NULL;
    A=sortedList(A);
    h2=sortedList(h2);
    return merge(A,h2);
}

ListNode* Solution::sortList(ListNode* A) {
    return sortedList(A);
}
