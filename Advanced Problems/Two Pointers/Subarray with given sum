Problem Description
Given an array of positive integers A and an integer B, find and return first continuous subarray which adds to B.

If the answer does not exist return an array with a single element "-1".

First sub-array means the sub-array for which starting index in minimum.



Problem Constraints
1 <= length of the array <= 100000
1 <= A[i] <= 109
1 <= B <= 109



Input Format
The first argument given is the integer array A.

The second argument given is integer B.



Output Format
Return the first continuous sub-array which adds to B and if the answer does not exist return an array with a single element "-1".


//Brute Force. TC: O(N^2)
vector<int> Solution::solve(vector<int> &A, int B) {
int i,j,n=A.size(),sum,start=-1,end=-1;
for(i=0;i<n;i++){
    sum=0;
    for(j=i;j<n;j++){
        sum+=A[j];
        if(sum==B){
            start=i;
            end=j;
            break;
        }
    }
    if(end!=-1){
        break;
    }
}
if(end==-1){return {-1};}

vector<int>result;
for(i=start;i<=end;i++){
    result.push_back(A[i]);
}
return result;

}

//We discard the whole thing and then start from scratch to calculate the complete sum. Instead we can slide our window such that our sum which has
become more than required is decreased.
Therefore we use Sliding Window..
TC: O(N) SC:O(1)

vector<int> Solution::solve(vector<int> &A, int B) {
int i,start=0,end=0,n=A.size(),sum=0;
while(end<n){
    sum+=A[end];
    end++;
    while(sum>B){
        sum-=A[start];
        start++;
    }
    if(sum==B){
        break;
    }
}
vector<int>result;

if(sum==B){
for(i=start;i<end;i++){
    result.push_back(A[i]);
}
return result;
}
return {-1};
}

