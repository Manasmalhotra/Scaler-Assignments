
Brute Force
TC: O(N^2) SC:O(N^2)[Worst case]

int Solution::solve(vector<int> &A, int B) {
    int i,n=A.size(),j,count=0;
    unordered_set<string>s;
    for(i=0;i<n;i++){
        for(j=0;j<n;j++){
            string ind=to_string(A[i])+"_"+to_string(A[j]);
            if(i!=j && A[i]-A[j]==B && s.find(ind)==s.end()){
                s.insert(ind);
            }
        }
    }
    return s.size();
}

Better
Apprach: To avoid duplicates maintain a map of all elements. After that iterate the map and get the required elements.
TC:O(NlogN) SC:O(N)
int Solution::solve(vector<int> &A, int B) {
int i,n=A.size(),count=0;
map<int,int>maps;
for(i=0;i<n;i++){
    maps[A[i]]+=1;
}

map<int,int>::iterator it;
for(it=maps.begin();it!=maps.end();it++){
    if(it->first+B==it->first){
        if(it->second>1){
        count+=1;
        }
    }
    else{
        if(maps.find(it->first+B)!=maps.end()){
            count+=1;
        }
    }
}
return count;
}

Best
TC:O(NlogN) SC:O(1)
Two Pointers

Sort the array and then apply two pointers. We use two pointers with p1=0 and p2=1 because in p1=0 and p2=n-1 we are not able to discard.
That is say [1,2,3,4,5] B=3 then diff decreases even if we decrease p2or increase p1. Thus we ae not able to decide which one to move.
But in P1=0 and p2=1 we move p2 if we need to increase the difference and we move p1 if we need to decrease.

Edge case: if p1 becomes equal to p2 while decreasing diff? Increase p2.

int Solution::solve(vector<int> &A, int B) {
    int i,j,n=A.size(),count=0;
    sort(A.begin(),A.end());
    int p1=0,p2=1;
    while(p2<n){
        if(A[p2]-A[p1]==B){
            count+=1;
            i=p1;
            j=p2;
            while(p1<n && A[i]==A[p1]){
                p1++;
            }
            while(p2<n && A[j]==A[p2]){
                p2++;
            }
        }
        else if(A[p2]-A[p1]>B){
            p1++;
            if(p1==p2){
                p2++;
            }
        }
        else{
            p2++;
        }
    }
    return count;
}
