Problem Description

Given an array A of N integers, are there elements a, b, c in S such that a + b + c = 0

Find all unique triplets in the array which gives the sum of zero.

Note:

Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c) The solution set must not contain duplicate triplets.



Problem Constraints

0 <= N <= 7000

-108 <= A[i] <= 108



Input Format

Single argument representing a 1-D array A.



Output Format

Output a 2-D vector where each row represent a unique triplet.

Approach: Fix one element using i.Now problem reduces to find a pair with sum B-A[i]. We sorted the array to get the answer in sorted form and apply two pointers
to solve the problem of finding pairs.

TC:O(N^2+NlogN)

vector<vector<int> > Solution::threeSum(vector<int> &A) {
    sort(A.begin(),A.end());
    int i,left,right,n=A.size(),sum;
    vector<vector<int> >result;

    for(i=0;i<n;i++){
        int left=i+1,right=n-1;
        while(left<right){
            sum=A[i]+A[left]+A[right];
            if(sum>0){
                right--;
            }
            else if(sum<0){
                left++;
            }
            else{
               vector<int>ans;
               ans={A[i],A[left],A[right]};
               result.push_back(ans);
               int lvalue=A[left];
               int rvalue=A[right];
               while(left<n && A[left]==lvalue){
                   left++;
               }
               while(right>=0 && A[right]==rvalue){
                   right--;
               }
            }
        }
        int temp=A[i];
        while(i<n-1 && A[i]==A[i+1]){
            i++;
        }
    }
    return result;
}
