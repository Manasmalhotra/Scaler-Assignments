Problem Description
Given a set of distinct integers A, return all possible subsets.

NOTE:

Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
Also, the subsets should be sorted in ascending ( lexicographic ) order.
The list is not necessarily sorted.


Problem Constraints
1 <= |A| <= 16
INTMIN <= A[i] <= INTMAX


Input Format
First and only argument of input contains a single integer array A.



Output Format
Return a vector of vectors denoting the answer.

Time Complexity: O(2^n) SC:O(2^n)
Subsets can be represented as:
000
001
010
011
100
101
110
111
2^n -1 ==>Bits required for Subsets for n elements.

vector<vector<int> > Solution::subsets(vector<int> &A) {
    int i,j,n=A.size();
    vector<vector<int> >result;
    sort(A.begin(),A.end());
    for(i=0;i<(1<<n);i++){
        vector<int>ans;
        for(j=0;j<n;j++){
            if((i>>j)&1==1){
                ans.push_back(A[j]);
            }
        }
        result.push_back(ans);
    }
    sort(result.begin(),result.end());
    return result;
}
