Problem Description

Given a positive integer A, the task is to count the total number of set bits in the binary representation of all the numbers from 1 to A.

Return the count modulo 109 + 7.

Problem Constraints

1 <= A <= 109

Brute Force
Approach : Iterate for all numbers 1 to A and count set bits for each number.Ater iterating all elements return the count.
TC:O(32*A)
SC:O(1)

But this will not work as 1<=A<=10^9.

int Solution::solve(int A) {
    int i,j,count=0;
    for(i=1;i<=A;i++){
        for(j=0;j<32;j++){
            if((i>>j)&1==1){
                count+=1;
            }
        }
    }
    return count;
}

Optimal Approach:
     16 8 4 2 1
0:00000
1:00001
2:00010
3:00011
4:00100
5:00101
6:00110
7:00111
8:01000
9:01001
10:01010

Now go on bit by bit you will observe a pattern at 0th bit that 0 and 1 occur alternately.
Thenn in 1st bit you can see that pattern 0011 repeats.
In 2nd bit 00001111 repeats.

Here we can generalize this pattern as: Pattern length:2*2^i
Number of 1s in pattern: 2^i
Now we can see that it is not always necessary that the pattern will be completed for each bit. 
Therefore to determine number of set bits in incomplete pattern: N%(2*2^i)==>remaining bits - 2^i(As number of 1s and 0s are equal in each pattern take it as subtracting occurence of )s in the pattern.

Thus count= (N/2*2^i)*2^i +max(0,N%2*2^i-2^i)

TC: O(32)~ O(1)
int Solution::solve(int A) {
    long i,N=A+1,pow=1,M=1e9+7,count=0,ans=0;
    for(i=0;i<32;i++){
        count=((N/(pow*2))*pow + max(0L,(N%(pow*2))-pow))%M;
        ans=(ans+count)%M;
        pow*=2;
    }
    return ans;
}
