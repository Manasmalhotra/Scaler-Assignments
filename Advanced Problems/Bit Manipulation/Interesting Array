Problem Description
You have an array A with N elements. We have two types of operation available on this array :
We can split an element B into two elements, C and D, such that B = C + D.
We can merge two elements, P and Q, to one element, R, such that R = P ^ Q i.e., XOR of P and Q.
You have to determine whether it is possible to convert array A to size 1, containing a single element equal to 0 after several splits and/or merge?



Problem Constraints
1 <= N <= 100000

1 <= A[i] <= 106

Approach: Even numbers can be made zero by spliting them into halves but the frequency of odd elements should be even as they will break into A[i]+A[i]+1.Say 13=6+6+1
7=3+3+1, then xor these all so 3^3 ^ 6^6 1^1=0 now if they will be odd a 1 will remain in last.
Also if sum=even you cn say that this sum can be divided into elements with xor=0.

    if(A[i]%2!=0){
        count++;
    }
}
if(count%2==0){
    return "Yes";
}
else{
    return "No";
}
}

Approach 2

string Solution::solve(vector<int> &A) {
int i=0,n=A.size(),sum=0;
for(i=0;i<n;i++){
    sum+=A[i];
}
if(sum%2==0){
    return "Yes";
}
else{
    return "No";
}
}
