Given an array of integers A, every element appears twice except for one. Find that integer that occurs once.

NOTE: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Problem Constraints
2 <= |A| <= 2000000

0 <= A[i] <= INTMAX

Input Format
The first and only argument of input contains an integer array A.

Output Format
Return a single integer denoting the single element.

Code:
Approach: As all other elements occur twice except one, when we take xor the ans variable will become zero for all the pairs and the only remeining element is single occuring
and A^0=A.

1^0=1
0^0=0

int Solution::singleNumber(const vector<int> &A) {
    int i,n=A.size(),val=0;
    for(i=0;i<n;i++){
        val=A[i]^val;
    }
    return val;
}

TC:O(N) SC:O(1)
