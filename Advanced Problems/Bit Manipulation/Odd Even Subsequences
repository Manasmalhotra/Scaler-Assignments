Given an array of integers A of size, N. Find the longest subsequence of A, which is odd-even.

A subsequence is said to be odd-even in the following cases:

The first element of the subsequence is odd; the second element is even, the third element is odd, and so on. For example: [5, 10, 5, 2, 1, 4], [1, 2, 3, 4, 5]

The first element of the subsequence is even, the second element is odd, the third element is even, and so on. For example: [10, 5, 2, 1, 4, 7], [10, 1, 2, 3, 4]

Return the maximum possible length of odd-even subsequence.

Note: An array B is a subsequence of an array A if B can be obtained from A by deleting several (possibly, zero, or all) elements.


Input Format

The only argument given is the integer array A.
Output Format

Return the maximum possible length of odd-even subsequence.

TC:O(N) SC:O(1).
Approach : Just check if you get 1 then search for 0 as you find 0 search for 1 then 0 then 1 and so on..


int Solution::solve(vector<int> &A) {
    int i,n=A.size();
    int len=1,flag=A[0]&1;

    for(i=1;i<n;i++){
       if((A[i]&1)!=flag){
           flag=1-flag;
           len++;
       }
    }
    return len;
}
