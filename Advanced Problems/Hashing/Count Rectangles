Problem Description
Given two arrays of integers A and B of size N each, where each pair (A[i], B[i]) for 0 <= i < N represents a unique point (x, y) in a 2-D Cartesian plane.

Find and return the number of unordered quadruplet (i, j, k, l) such that (A[i], B[i]), (A[j], B[j]), (A[k], B[k]) and (A[l], B[l]) form a rectangle with the rectangle having all the sides parallel to either x-axis or y-axis.



Problem Constraints
1 <= N <= 2000
0 <= A[i], B[i] <= 109

Brute Force
int Solution::solve(vector<int> &A, vector<int> &B) {
    int i,j,k,n=A.size();
    long count=0,mod=1e9+7;
    unordered_set<pair<int,int> >maps;
    for(i=0;i<n;i++){
        maps.insert({A[i],B[i]});
    }

    for(i=0;i<n;i++){
        for(j=i+1;j<n;j++){
            res1=false;
            res2=false;
            for(k=0;k<n;k++){
                if(A[k]==A[i] && B[k]==B[j]){
                    res1=true;
                }
                if(A[k]==A[j] && B[k]==B[i]){
                    res2=true;
                }
            }
            if(res1 && res2){
                count+=1;
            }
    }
    return count/2;
}

Hashing

int Solution::solve(vector<int> &A, vector<int> &B) {
    int i,j,k,n=A.size();
    long count=0,mod=1e9+7;
    map<pair<int,int>,int>maps;
    for(i=0;i<n;i++){
        maps[{A[i],B[i]}]+=1;
    }

    for(i=0;i<n;i++){
        for(j=i+1;j<n;j++){
             if(A[i]!=A[j] && B[i]!=B[j]){
                 bool res1=maps.find({A[i],B[j]})!=maps.end();
                 bool res2=maps.find({A[j],B[i]})!=maps.end();
                 if(res1 && res2){
                     count=(count+1)%mod;
                 }
             } 
           }
    }
    return count/2;
}

