Problem Description
You are given two strings, A and B, of size N and M, respectively.

You have to find the count of all permutations of A present in B as a substring. You can assume a string will have only lowercase letters.


int Solution::solve(string A, string B) {
    int n=A.length(),m=B.length(),i,j,count=0;
    vector<int>arr(26,0);
    vector<int>b(26,0);

    for(i=0;i<n;i++){
        b[B[i]-'a']++;
    }
    
    for(i=0;i<n;i++){
        arr[A[i]-'a']++;
    }

    for(i=0;i<26;i++){
        if(b[i]!=arr[i]){
           break;
        }
    }

    if(i==26){
        count+=1;
    }

    int start=0,end=n;
    while(end<m){
        b[B[start]-'a']--;
        b[B[end]-'a']++;
        start++;
        end++;
        for(i=0;i<26;i++){
            if(arr[i]!=b[i]){
                break;
            }
        }
        if(i==26){
            count++;
        }
    }
    return count;
}
