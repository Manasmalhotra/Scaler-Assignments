Problem Description
Given two arrays of integers A and B of size N each, where each pair (A[i], B[i]) for 0 <= i < N represents a unique point (x, y) in 2D Cartesian plane.

Find and return the number of unordered triplets (i, j, k) such that (A[i], B[i]), (A[j], B[j]) and (A[k], B[k]) form a right-angled triangle with the triangle having one side parallel to the x-axis and one side parallel to the y-axis.

NOTE: The answer may be large so return the answer modulo (109 + 7).

Brute Force
Find all pairs forming intersection pt

int Solution::solve(vector<int> &A, vector<int> &B) {
    int i,j,n=A.size();
    long count=0,mod=1e9+7;
    set<string>s;
    for(i=0;i<n;i++){
        s.insert(to_string(A[i])+"-"+to_string(B[i]));
    }

    for(i=0;i<n;i++){
        for(j=i+1;j<n;j++){
            if(A[i]!=A[j] && B[i]!=B[j]){
            if(s.find(to_string(A[i])+"-"+to_string(B[j]))!=s.end()){
                count=(count+1)%mod;
            }
            if(s.find(to_string(A[j])+"-"+to_string(B[i]))!=s.end()){
                count=(count+1)%mod;
            }
            }
        }
    }
    return count;
}
Optimised

# Take intersection pt of base and perpendicular and get the number of possible other two pts.

int Solution::solve(vector<int> &A, vector<int> &B) {
    int i,n=A.size();
    unordered_map<int,int>mapx;
    unordered_map<int,int>mapy;

    for(i=0;i<n;i++){
        mapx[A[i]]+=1;
        mapy[B[i]]+=1;
    }
    
    long count=0,mod=1e9+7;

    for(i=0;i<n;i++){
        count=(count+((mapx[A[i]]-1)*(mapy[B[i]]-1))%mod)%mod;
    }
    
    return count;
}
