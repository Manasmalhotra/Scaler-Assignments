Problem Description
Given a string A, find the length of the longest substring without repeating characters.

Note: Users are expected to solve in O(N) time complexity.



Problem Constraints
1 <= size(A) <= 106

String consists of lowerCase,upperCase characters and digits are also present in the string A.



Input Format
Single Argument representing string A.



Output Format
Return an integer denoting the maximum possible length of substring without repeating characters.


Approach: If the character does not exist in map, add the latest index it was found in the map and keep the track of max.
          If character is found and also if we have not skipped it before, skip using the latest index. abdefghdsaklop. here we skip d as it occurs twice and will move start to e.
          Also when we get the a after s we won't do anything as start has already surpassed that occurrence of a.
          
TC:O(N) SC:O(N)

Method #1

int Solution::lengthOfLongestSubstring(string A) {
    int i,n=A.length(),maxx=INT_MIN;
    unordered_map<char,int>maps;
    int start=0;

    for(i=0;i<n;i++){
        if(maps.find(A[i])!=maps.end() && start<maps[A[i]]+1){
            start=maps[A[i]]+1;
        }
        maps[A[i]]=i;    
        maxx=max(maxx,i-start+1);    
    }
    return maxx;
}

Method#2

int Solution::lengthOfLongestSubstring(string A) {
    int i=0,j=0,n=A.length(),ans=1;
    unordered_set<char>s;
    while(j<n){
        if(s.find(A[j])!=s.end()){
            s.erase(A[i]);
            i+=1;
        }
        else{
            s.insert(A[j]);
            ans=max(ans,j-i+1);
            j+=1;
        }
    }
    return ans;
}


