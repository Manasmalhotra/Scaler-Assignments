Problem Description
Find the Bth smallest element in given array A .

NOTE: Users should try to solve it in less than equal to B swaps.

Approach 1: Selection Sort: Atmax B swaps will be required here if no element is at correct position.
TC:O(N^2)

int Solution::kthsmallest(const vector<int> &arr, int B) {
    int i,j,n=arr.size(),minn,minindex;
    vector<int>A=arr;

    for(i=0;i<B;i++){
        minn=A[i];
        minindex=i;
        for(j=i+1;j<n;j++){
            if(A[j]<minn){
                minn=A[j];
                minindex=j;
            }
        }
        swap(A[i],A[minindex]);
    }
    return A[B-1];
}

Approach 2: Sort the data and get position. O(NlogN)

Approach 3: Binary Search :O(NlogN)
int Solution::solve(const vector<int> &A, int k) {

	// Binary search for the answer.
	int ans = -1;
	int start = A[0], end = A[0];
	for (int i = 1; i < A.size(); i++) {
		start = min(start, A[i]);
		end = max(end, A[i]);
	}
	int mid, numSmaller, i;
	while (start <= end) {
		mid = (start + end) / 2;
		numSmaller = 0;
		for (i = 0; i < A.size(); i++) if (A[i] <= mid) numSmaller++;
		if (numSmaller >= k) {//Catch is including equal to element count==k donot fall for elements less than count ==k-1
			end = mid - 1;
			ans = mid;
		}
		else {
			start = mid + 1;
		}
	}
	return ans;

}
