Gray Code

Problem Description
The gray code is a binary numeral system where two successive values differ in only one bit.

Given a non-negative integer A representing the total number of bits in the code, print the sequence of gray code.

A gray code sequence must begin with 0.



Problem Constraints
1 <= A <= 16



Input Format
The first argument is an integer A.



Output Format
Return an array of integers representing the gray code sequence.



Example Input
Input 1:

A = 2
Input 1:

A = 1
 
Approach: Let A=1 then codes: [0,1]
let A=2 code: [00 01,10,11]
A=3 code: [000,001,010,011,111,110,101,100]
A=4 code: [0000,0001,0010,0011,0111,0110,0101,0100,11001101,1110,1111,1011,1010,1001,1000]

Notice a pattern as you write these numbers.
1) A=1:{0,1} A=2:{_0,_1} If you will fill the blanks with 0 and then one you will get the sequence: {00,01,10,11}
vector<int> Solution::grayCode(int A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    if(A==0){
        return {};
    }

    if(A==1){
        vector<int>temp;
        temp.push_back(0);
        temp.push_back(1);
        return temp;
    }
    vector<int>res=grayCode(A-1);
    vector<int>ans;
    int i;
    for(i=0;i<res.size();i++){
        ans.push_back(res[i]);
    }
    for(i=res.size()-1;i>=0;i--){
        ans.push_back(res[i]+(1<<(A-1)));
    }
    return ans;
}


Example Output
output 1:

[0, 1, 3, 2]
output 2:

[0, 1]
