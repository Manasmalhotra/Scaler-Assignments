Problem Description
Given a bitonic sequence A of N distinct elements, write a program to find a given element B in the bitonic sequence in O(logN) time.

NOTE:

A Bitonic Sequence is a sequence of numbers which is first strictly increasing then after a point strictly decreasing.


Problem Constraints
3 <= N <= 105

1 <= A[i], B <= 108

Given array always contain a bitonic point.

Array A always contain distinct elements.



Input Format
First argument is an integer array A denoting the bitonic sequence.

Second argument is an integer B.



Output Format
Return a single integer denoting the position (0 index based) of the element B in the array A if B doesn't exist in A return -1.


//Approach : Find the bitonic pivot in the array first and then apply seperate search for both halves.

int findBitonic(vector<int>A){
    int n=A.size();
    int mid,low=1,high=n-2;

    if(A[0]>A[1]){
        return 0;
    }

    if(A[n-1]>A[n-2]){
        return n-1;
    }

    while(low<=high){
        mid=low+(high-low)/2;
        if(A[mid]>A[mid-1] && A[mid]>A[mid+1]){
            return mid;
        }
        else if(A[mid]<A[mid+1]){
            low=mid+1;
        }
        else{
            high=mid-1;
        }
    }
}

int search(vector<int>&A,int low,int high,int B){
    int mid=(low+high)/2;
    while(low<=high){
        mid=(low+high)/2;
        if(A[mid]==B){
            return mid;
        }
        else if(A[mid]>B){
            high=mid-1;
        }
        else{
            low=mid+1;
        }
    }
    return -1;
}


int search1(vector<int>&A,int low,int high,int B){
    int mid=(low+high)/2;
    while(low<=high){
        mid=(low+high)/2;
        if(A[mid]==B){
            return mid;
        }
        else if(A[mid]>B){
            low=mid+1;
        }
        else{
            high=mid-1;
        }
    }
    return -1;
}

int Solution::solve(vector<int> &A, int B) {
    int index,n=A.size();
    index=findBitonic(A);
    int mid,low=0,high=n-1;
    mid=(low+high)/2;
    if(A[mid]==B){
        return mid;
    }
    else{
        int ans1=-1,ans2=-1;
        
        if(A[index]==B){
            return index;
        }

        if(index-1>=0){
        ans1=search(A,0,index-1,B);
        }

        if(index+1<n-1){
        ans2=search1(A,index+1,n-1,B);
        }

        if(ans1!=-1){
            return ans1;
        }
        else{
             return ans2;
        }
    }
}

