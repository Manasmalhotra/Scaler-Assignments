Problem Description
Given a matrix of integers A of size N x M in which each row is sorted.

Find and return the overall median of matrix A.

NOTE: No extra memory is allowed.

NOTE: Rows are numbered from top to bottom and columns are numbered from left to right.

Approach: We define countless function to count numbers less than k in a row.Now we can have a minimum value and maximum value from the matrix.After this we do binary
search for finding element having elements less than it for count<=k. As if we do not have duplicates this count will be k and if w ehave duplicates this can be less than k.
Now k here we have chossen as n*m/2 so a 3*3 matrix we have k=4 and we get element which as number of elements less than it as <=4. If duplicates are not there
you can see that this gives us the fifth number, which is correct by the calculation of median logic.

TC: log2(h-l+1)*{N*log2M} ==>First log=== number of iterations of binary search. The insidebraces indicate steps done in each bs iteration.
int countless(vector<int>&A,int value){
     if(A[0]>=value){
         return 0;
     }
     int low=1,high=A.size()-1,mid,ans=1;
     while(low<=high){
        mid=low+(high-low)/2;
        if(A[mid]>=value){
            high=mid-1;
        }
        else{
            ans=mid+1;
            low=mid+1;
        }
     }
     return ans;
}

int findkth(vector<vector<int> >&A,int k){
    int n=A.size(),m=A[0].size(),i,j,minn=INT_MAX,maxx=INT_MIN;
    for(i=0;i<n;i++){
        minn=min(minn,A[i][0]);
        maxx=max(maxx,A[i][m-1]);
    }
    int low=minn,high=maxx,mid;
    int ans=minn,c=0;

    while(low<=high){
        mid=low+(high-low)/2;
        c=0;
        for(i=0;i<n;i++){
            c+=countless(A[i],mid);
        }
        if(c<=k){
            ans=mid;
            low=mid+1;
        }
        else{
            high=mid-1;
        }
    }
    return ans;
}

int Solution::findMedian(vector<vector<int> > &A) {
    int n=A.size(),m=A[0].size();
    return findkth(A,(n*m)/2);
}
