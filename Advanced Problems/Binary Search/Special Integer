Problem Description
Given an array of integers A and an integer B, find and return the maximum value K such that there is no subarray in A of size K with the 
sum of elements greater than B.



Problem Constraints
1 <= |A| <= 100000
1 <= A[i] <= 10^9

1 <= B <= 10^9


//Brute Force
Check all the subarrays
TC:O(N^2)

int Solution::solve(vector<int> &A, int B) {
    int i,j,n=A.size(),sum=0;
    int len=n;
    for(i=0;i<n;i++){
        sum=0;
        for(j=i;j<n;j++){
            sum+=A[j];
            //cout<<sum<<endl;
            if(sum>B){
                break;
            }
        }
        if(sum>B){
        len=min(len,j-i);
        }
    }
    return len;
}

Binary Search:
TC:O(NlogN)
Approach: Binry search on possible size of the window. Then for each window size check if we have maxx possible sum>B;

bool subarray(vector<int>&A,int B,int k){
int i,n=A.size();
long sum=0;
for(i=0;i<k;i++){
  sum+=A[i];
}

long maxx=sum;
int start=0,end=i;
while(end<n){
   sum-=A[start];
   sum+=A[end];
   maxx=max(maxx,sum);
   start++;
   end++;
}
maxx=max(maxx,sum);

if(maxx>B){
    return false;
}
return true;
}

int Solution::solve(vector<int> &A, int B) {
    int low=0,high=A.size(),mid,ans=0;
    while(low<=high){
        mid=low+(high-low)/2;
        if(subarray(A,B,mid)){
            ans=mid;
            low=mid+1;
        }
        else{
            high=mid-1;
        }
    }
    return ans;
}

Sliding Window: O(N)
Approach: As the sum becomes greater than B, slide the window.
int Solution::solve(vector<int> &A, int B) {
int i,n=A.size(),sum=0;
int start=0,end=0,len=n;
while(end<n){
   sum+=A[end];
   end++;
   while(sum>B){
       sum-=A[start];
       start++;
       len=min(len,end-start);
   }
}
return len;
}

