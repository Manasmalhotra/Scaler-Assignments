Problem Description
Given a matrix of integers A of size N x M and an integer B. Write an efficient algorithm that searches for integer B in matrix A.

This matrix A has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than or equal to the last integer of the previous row.
Return 1 if B is present in A, else return 0.

NOTE: Rows are numbered from top to bottom, and columns are from left to right.



Problem Constraints
1 <= N, M <= 1000
1 <= A[i][j], B <= 106

Approach 1: Search each of the row for the elemnt required as rows are sorted.

int binarysearch(vector<int>A,int low,int high,int B){
    int mid;
    while(low<=high){
        mid=low+(high-low)/2;
        if(A[mid]==B){
            return mid;
        }
        else if(A[mid]>B){
            high=mid-1;
        }
        else{
            low=mid+1;
        }
    }
    return -1;
}

int Solution::searchMatrix(vector<vector<int> > &A, int B) {
    int i,x,n=A.size();
    for(i=0;i<n;i++){
       x=binarysearch(A[i],0,A[i].size()-1,B);
       if(x!=-1){
           return 1;
       }
    }
    return 0;
}


Approach 2: As the last element of each row is less than the starting elemnt of the next row, we can search the matrix as an array by playing with the index.

int Solution::searchMatrix(vector<vector<int> > &A, int B) {
    int n=A.size(),m=A[0].size();
    int low=0,high=(n*m)-1,mid;
    while(low<=high){
        mid=low+(high-low)/2;
        if(A[mid/m][mid%m]==B){
            return 1;
        }
        else if(A[mid/m][mid%m]<B){
            low=mid+1;
        }
        else{
            high=mid-1;
        }
    }
    return 0;
}
