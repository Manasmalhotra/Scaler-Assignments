Single Element in Sorted Array

Problem Description
Given a sorted array of integers A where every element appears twice except for one element which appears once, find and return this single element that appears only once.

NOTE: Users are expected to solve this in O(log(N)) time

Examples:

0 1 2 3 4 5 6
1 1 2 2 3 4 4

0 1 2 3 4 5 6 7 8 9 9
1 1 2 3 3 4 4 5 5 6 6



Brute force: Take xor o all elements O(N)

Binary Search : Optimised TC: O(logN)
Edge case for low=mid+1:
6 6 9
Reason for low=mid+2 is because we do mid=mid-1 to get first occurrence and if a number is not the answer then it should be completely ignored.

int Solution::solve(vector<int> &A) {
    int n=A.size();
    int high=n-2,low=1,mid;
    
    if(n==1){
        return A[0];
    }
    if(A[0]!=A[1]){
        return A[0];
    }
    if(A[n-2]!=A[n-1]){
        return A[n-1];
    }

    while(low<=high){
        mid=low+(high-low)/2;
        if(A[mid]!=A[mid-1] && A[mid]!=A[mid+1]){
            return A[mid];
        }
        else if(A[mid]==A[mid-1]){
            mid=mid-1;
        }
        if((mid%2)==0){
            low=mid+2;
        }
        else{
            high=mid-1;
        }
    }
    return -1;
}
