Approach: Search in the part that is sorted in the array.
Say if A[low]<A[mid] that means left part is sorted. Define conditions for value to exist in left if not then it will be on right.
With same approach if A[mid]<A[high] then right part is sorted and define conditions for the same.

TC:O(logN) . since we half the search space every time.
N+N/2+N/4+N/8+..N/2^k
N/2^k=1 ==> 2^k=N==> k=log2(N)
SC:O(1). since we do not use any extra space.

int Solution::search(const vector<int> &A, int B) {
    int mid,low=0,high=A.size()-1;
    while(low<=high){
        mid=low+(high-low)/2;
        if(A[mid]==B){
            return mid;
        }
        else if(A[low]<=A[mid]){
            if(B<A[mid] && B>=A[low]){
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        else{
            if(B>A[mid] && B<=A[high]){
                low=mid+1;
            }
            else{
                high=mid-1;
            }
        }
    }
    return -1;
}
