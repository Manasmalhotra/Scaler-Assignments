Problem Description
Given a sorted array of integers A(0 based index) of size N, find the starting and the ending position of a given integer B in array A.

Your algorithm's runtime complexity must be in the order of O(log n).

Return an array of size 2, such that the first element = starting position of B in A and the second element = ending position of B in A, if B is not found in A return [-1, -1].
Approach: Find the first and last occurrence as if you found the element go further left to see if element is on left. Further you can see that incase of last occurrence if 
you find the element you go further right to see if some other position is possible.


int findleft(const vector<int>&A,int low,int high,int x){
    int mid,ans=-1;
    while(low<=high){
        mid=low+(high-low)/2;
        if(A[mid]==x){
            ans=mid;
            high=mid-1;
        }
        else if(A[mid]>x){
            high=mid-1;
        }
        else{
            low=mid+1;
        }
    }
    return ans;
}

int findright(const vector<int>&A,int low,int high,int x){
    int mid,ans=-1;
    while(low<=high){
        mid=low+(high-low)/2;
        if(A[mid]==x){
            ans=mid;
            low=mid+1;
        }
        else if(A[mid]>x){
            high=mid-1;
        }
        else{
            low=mid+1;
        }
    }
    return ans;
}

vector<int> Solution::searchRange(const vector<int> &A, int B) {
       int n=A.size(),l=-1,r=-1;
       vector<int>result;

       l=findleft(A,0,n-1,B);
       if(l==-1){
           result.push_back(-1);
           result.push_back(-1);
           return result;
       }
       r=findright(A,0,n-1,B);
       result.push_back(l);
       result.push_back(r);
       return result; 
}
