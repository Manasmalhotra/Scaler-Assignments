Problem Description
Given 2 integers A and B and an array of integers C of size N. Element C[i] represents the length of ith board.
You have to paint all N boards [C0, C1, C2, C3 â€¦ CN-1]. There are A painters available and each of them takes B units of time to paint 1 unit of the board.

Calculate and return the minimum time required to paint all boards under the constraints that any painter will only paint contiguous sections of the board.
NOTE:
1. 2 painters cannot share a board to paint. That is to say, a board cannot be painted partially by one painter, and partially by another.
2. A painter will only paint contiguous boards. This means a configuration where painter 1 paints boards 1 and 3 but not 2 is invalid.

Return the ans % 10000003.


Brute Force.
Iterate from least possible time to max possible time.
bool check(vector<int>C,long mid,int A,int B){
  long i,n=C.size(),time=0,c=0;
  for(i=0;i<n;i++){
      time=time+C[i];
      while(time>mid){
          c=c+1;
          if(c==A){
              return false;
          }
          time=C[i];
      }
  }
  return true;
}

int Solution::paint(int A, int B, vector<int> &C) {
    int i,n=C.size(),maxx=INT_MIN;
    long sum=0;
    for(i=0;i<n;i++){
        maxx=max(maxx,C[i]);
        sum+=C[i];
    }
    long low=maxx,high=sum,mid,mod=10000003,ans;
    for(i=low;i<=high;i++){
        if(check(C,i,A,B)){
            return (i*B)%mod;
        }
    }
    return -1;
}

Optimisation
Approach: Target= Minimum Time, Search space=Time, Discard==> If we can do atask in n time we can do it in n+1,n+2,.. times. If we cannot do it in n time we cannot
do it in 1..n-1 time. So we can discard half of the values for each point.
Therefore apply binary search.

bool check(vector<int>C,long mid,int A,int B){
  long i,n=C.size(),time=0,c=0;
  for(i=0;i<n;i++){
      time=time+C[i];
      while(time>mid){
          c=c+1;
          if(c==A){
              return false;
          }
          time=C[i];
      }
  }
  return true;
}


int Solution::paint(int A, int B, vector<int> &C) {
    long i,n=C.size(),sum=0,maxx=INT_MIN;
    for(i=0;i<n;i++){
        sum=sum+C[i];
        maxx=max(maxx,1L*C[i]);
    }

    long low=maxx,high=sum,mid,ans=B;
    while(low<=high){
        mid=low+(high-low)/2;
        if(check(C,mid,A,B)){
            ans=mid;
            high=mid-1;
        }
        else{
            low=mid+1;
        }
    }
    return (ans*B)%10000003;
}
