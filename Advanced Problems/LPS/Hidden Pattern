Problem Description

Given two strings - a text A and a pattern B, having lower-case alphabetic characters. You have to determine the number of occurrences of pattern B in text A 
as its substring. i.e. the number of times B occurs as a substring in A.

Approach: Standard use case of lps. Just append the pattern at start seperate with the seperator and get the result.

vector<int>lps(string s){
    int x,i,n=s.length();
    vector<int>l(n,0);
    l[0]=0;
    for(i=1;i<n;i++){
        x=l[i-1];
        while(s[i]!=s[x]){
            if(x==0){
                x=-1;
                break;
            }
            x=l[x-1];
        }
        l[i]=x+1;
    }
    return l;
}
int Solution::solve(const string A, const string B) {
    string res=B+"@"+A;
    int n=B.length(),count=0;
    vector<int>result=lps(res);
    for(int i=0;i<result.size();i++){
        if(result[i]==n){
            count++;
        }
    }
    return count;
}

