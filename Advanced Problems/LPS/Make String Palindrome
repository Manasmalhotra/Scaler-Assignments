Problem Description
Given a string A of size N consisting only of lowercase alphabets. The only operation allowed is to insert characters in the beginning of the string.

Find and return how many minimum characters are needed to be inserted to make the string a palindrome string.

Approach: We need to get the longest prefix palindrome.
Ex: ghbab here we can see that finding any palindrome won't help as we can only append at beginning.


vector<int> lps(string res){
    int i,n=res.length(),x;
    vector<int>lps(n,0);
    for(i=1;i<n;i++){
        x=lps[i-1];
        while(res[i]!=res[x]){
            if(x==0){
                x=-1;
                break;
            }
            x=lps[x-1];
        }
        lps[i]=x+1;
    }
    return lps;
}

int Solution::solve(string A) {
    string revStr = A;
    reverse(revStr.begin(), revStr.end());
    string concat = A + "$" + revStr;
    vector<int> lpss = lps(concat);
    return (A.length() - lpss.back());
}
