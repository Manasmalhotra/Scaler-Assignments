Problem Description
Given two binary strings A and B, count how many cyclic shift of B when taken XOR with A give 0.

NOTE: If there is a string, S0, S1, ... Sn-1 , then it is a cyclic shift is of the form Sk, Sk+1, ... Sn-1, S0, S1, ... Sk-1 where k can be any integer from 0 to N-1.

void lps(vector<int>&l,string A){
    int i,x,n=A.length();
    l[0]=0;
    for(i=1;i<n;i++){
         x=l[i-1];
         while(A[x]!=A[i]){
             if(x==0){
                 x=-1;
                 break;
             }
             x=l[x-1];
        }
        l[i]=x+1;

    }
}

int Solution::solve(string A, string B) {
    int i,n=A.length(),ans=0;
    string res=A+"@"+B+B;
    vector<int>result(res.length(),0);
    lps(result,res);
    for(i=0;i<result.size();i++){
        cout<<result[i]<<" ";
        if(result[i]==n){
            ans=ans+1;
        }
    }
    cout<<endl;
    if(A==B){
        return ans-1;
    }
    return ans;
}

