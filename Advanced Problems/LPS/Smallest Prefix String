Problem Description
Given 2 strings A and B of size N and M respectively consisting of lowercase alphabets, find the lexicographically smallest string that 
can be formed by concatenating non-empty prefixes of A and B (in that order).
Note: The answer string has to start with a non-empty prefix of string A followed by a non-empty prefix of string B.

Problem Constraints
1 <= N, M <= 100000

Input Format
The first argument is a string A of size N.
The second argument is a string B of size M.



Output Format
Return lexicographically smallest string that can be formed by concatenating non-empty prefixes of A and B (in that order).



Example Input
Input 1:

 A = "abba"
 B = "cdd"
 
Example Output
Output 1:

 "abbac"
 
 Approach: We have to get the lexicigraphically smallest string so we will see till when can we append characters of A before the first character of B to make it the smallest.
 We only append one character from B because bca comes after bc. So appending more than required will only harm.

string Solution::smallestPrefix(string A, string B) {
vector<int>count(26,0);
vector<int>c(26,0);
int i,j,n=A.length(),m=B.length(),index,found,minn=INT_MAX;
for(i=0;i<n;i++){
   index=A[i]-'a';
   count[index]+=1; 
}
for(j=0;j<m;j++){
    c[B[j]-'a']+=1;
}

string res;
res+=A[0];
int k=1;
if(k<n && A[k]<B[0]){
    while(k<n && A[k]<B[0]){
        res+=A[k];
        k++;
    }
}
res+=B[0];
return res;
}
