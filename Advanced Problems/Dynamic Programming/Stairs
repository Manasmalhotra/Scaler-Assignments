Problem Description
You are climbing a staircase and it takes A steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Return the number of distinct ways modulo 1000000007

Problem Constraints
1 <= A <= 105

Input Format
The first and the only argument contains an integer A, the number of steps.

Output Format
Return an integer, representing the number of ways to reach the top.

Approach: Suppose we have A=5. Then ans=steps(4)*1(As only one option to climb 1 step) +steps(3)*1(As only one option to climb 2 steps)
steps(4)=steps(3)+steps(2)
and similarly. Thus we can see that there are overlapping subproblems and thus we can use dp.

Recursive Code.
TC:O(2^A): two ways at each step.
SC:O(A):Max size of recursion stack: A->A-1->A-2...0.

int ways(int A){
    int mod=1e9+7;

    if(A<0){
        return 0;
    }
    if(A==0){
        return 1;
    }
    return (ways(A-1)%mod+ways(A-2)%mod)%mod;

}

int Solution::climbStairs(int A) {
    return ways(A);
}

Memoize

int ways(int A,vector<int>&dp){
    int mod=1e9+7;

    if(A<0){
        return 0;
    }
    if(A==0){
        return 1;
    }
    if(dp[A]!=-1){
        return dp[A];
    }
    return dp[A]=(ways(A-1,dp)%mod+ways(A-2,dp)%mod)%mod;
}

int Solution::climbStairs(int A) {
    vector<int>dp(A+1,-1);
    return ways(A,dp);
}

Bottom up
Trick: Just reverse memoized code.

int Solution::climbStairs(int A) {
    int i,mod=1e9+7;
    vector<int>dp(A+1,1);
    for(i=2;i<=A;i++){
        dp[i]=(dp[i-1]+dp[i-2])%mod;
    }
    return dp[A];
}
