Approch: Longest Common Subsequence. Just put one more condition that i!=j so as to avoid overlap.
abab===> aba|b and  abab ==>  ab|ab==> Now when this case matches i!=j and A[i]==A[j] thus we get 2 as answer.
abab     abab       aba|b     abab
int ways(string A,string B,int i,int j,vector<vector<int>>&dp){
    if(i<0 && j<0){
        return 1;
    }
    if(i<0 || j<0){
        return 0;
    }
    if(dp[i][j]!=-1){
        return dp[i][j];
    }
    if(A[i]==B[j] && i!=j){
        return dp[i][j]=1+ways(A,B,i-1,j-1,dp);
    }
    return dp[i][j]=max(ways(A,B,i-1,j,dp),ways(A,B,i,j-1,dp));
}

int Solution::anytwo(string A) {
    int n=A.length();
    vector<vector<int> >dp(n,vector<int>(n,-1));
    int ans=ways(A,A,n-1,n-1,dp);
    if(ans>=2){
        return 1;
    } 
    return 0;
}
