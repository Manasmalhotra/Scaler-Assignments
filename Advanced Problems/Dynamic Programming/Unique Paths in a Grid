Approach: ADD number of ways to reach i-1,j and i,j-1 to get to i,j.

Memoization

public class Solution {
    int ways(ArrayList<ArrayList<Integer>>A,int[][]dp,int n,int m){
       if(n<0 || m<0 || A.get(n).get(m)==1){
           return 0;
       }

       if(n==0 && m==0){
           return 1;
       }

       if(dp[n][m]!=-1){
           return dp[n][m];
       }

       return dp[n][m]=ways(A,dp,n-1,m)+ways(A,dp,n,m-1);
    }

    public int uniquePathsWithObstacles(ArrayList<ArrayList<Integer>> A) {
        int i,j,n=A.size(),m=A.get(0).size();
        int[][]dp=new int [n][m];
        if(A.get(0).get(0)==1){
            return 0;
        }
        for(i=0;i<n;i++){
            for(j=0;j<m;j++){
                dp[i][j]=-1;
            }
        }
        return ways(A,dp,n-1,m-1);
    }
}

Bottom up

public class Solution {
    public int uniquePathsWithObstacles(ArrayList<ArrayList<Integer>> A) {
        int i,j,n=A.size(),m=A.get(0).size();
        if(A.get(0).get(0)==1 || A.get(n-1).get(m-1)==1){
            return 0;
        }
        int[][]dp=new int[n][m];
        for(i=0;i<n;i++){
            for(j=0;j<m;j++){
                dp[i][j]=0;
            }
        }
        dp[0][0]=1;
        for(j=1;j<m;j++){
            if(A.get(0).get(j)==1){
                break;
            }
            dp[0][j]=dp[0][j-1];
        }
        for(i=1;i<n;i++){
            if(A.get(i).get(0)==1){
                break;
            }
            dp[i][0]=dp[i-1][0];
        }
        for(i=1;i<n;i++){
            for(j=1;j<m;j++){
                if(A.get(i).get(j)!=1){
                    dp[i][j]=dp[i-1][j]+dp[i][j-1];
                }
            }
        }
        return dp[n-1][m-1];
    }
}

