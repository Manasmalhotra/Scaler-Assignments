Problem Description
Given an array of integers A representing chain of 2-D matices such that the dimensions of ith matrix is A[i-1] x A[i].

Find the most efficient way to multiply these matrices together. The problem is not actually to perform the multiplications, but merely to decide in which order to perform the multiplications.

Return the minimum number of multiplications needed to multiply the chain.



Problem Constraints
1 <= length of the array <= 1000
1 <= A[i] <= 100



Input Format
The only argument given is the integer array A.



Output Format
Return an integer denoting the minimum number of multiplications needed to multiply the chain.



Example Input
Input 1:

 A = [40, 20, 30, 10, 30]
Input 2:

 A = [10, 20, 30]


Example Output
Output 1:

 26000
Output 2:

 6000
 
 
 Approach: Do not see dimension array instead consider the number of matrices you need to multiply.
 If dimension array size is 5 we have 4 matrices in total.
 Multiply Matrices(i,..j)==>resultant size=i-1*j.
 Cost to multiply two matrices 3*4 and 4*5 == 3*4*5. Because to get each entry of the resultant matrix we need four multiplications which will be added together.
 
 int minways(vector<int>&A,vector<vector<int> >&dp,int i,int j){
    if(i==j){
        return 0;
    }
    if(dp[i][j]!=INT_MAX){
        return dp[i][j];
    }
    int k;
    for(k=i;k<j;k++){
        dp[i][j]=min(dp[i][j],minways(A,dp,i,k)+minways(A,dp,k+1,j)+A[i-1]*A[j]*A[k]);//1,1 to 2,5. 2) 1,2 to 3,5 3)1,3 and 4,5  4) 1,4 and 5,5
    }
    return dp[i][j];
}

int Solution::solve(vector<int> &A) {
    int n=A.size();
    vector<vector<int> >dp(n,vector<int>(n,INT_MAX));
    return minways(A,dp,1,n-1);
}
