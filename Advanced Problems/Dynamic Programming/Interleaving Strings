Problem Description
Given A, B, C find whether C is formed by the interleaving of A and B.



Problem Constraints
1 <= length(A), length(B) <= 100

1 <= length(C) <= 200
Tesrcase:
A exhausted.
B exhausted.
A,B both exhausted.
A and B's character are equal then we need to explore both possibilitites.
A and B's character unequal:proceed in direction that matches C else return 0.

Recursion+Memoization Approach..

int ways(string A,string B,string C,int i,int j,int k,vector<vector<int> >&dp){
    if(i<0 && j<0){
        if(k<0){
            return 1;
        }
        return 0;
    }

    if(i<0){
       if(B[j]==C[k]){
           return ways(A,B,C,i,j-1,k-1,dp);
       }
       return 0;
    }
    if(j<0){
        if(A[i]==C[k]){
            return ways(A,B,C,i-1,j,k-1,dp);
        }
        else{
            return 0;
        }
    }
    
    if(dp[i][j]!=-1){
        return dp[i][j];
    }

    if(A[i]==B[j]){
        if(A[i]==C[k]){
            return dp[i][j]=ways(A,B,C,i-1,j,k-1,dp) | ways(A,B,C,i,j-1,k-1,dp);
        }
        else{
           return dp[i][j]=0;
        }
    }
    else{
        if(A[i]==C[k]){
            return dp[i][j]=ways(A,B,C,i-1,j,k-1,dp);
        }
        else if(B[j]==C[k]){
            return dp[i][j]=ways(A,B,C,i,j-1,k-1,dp);
        }
        else{
            return dp[i][j]=0;
        }
    }
}

int Solution::isInterleave(string A, string B, string C) {
    int i,n=A.length(),m=B.length(),k=C.length();
    vector<vector<int> >dp(n,vector<int>(m,-1)); 
    return ways(A,B,C,n-1,m-1,k-1,dp);

}
