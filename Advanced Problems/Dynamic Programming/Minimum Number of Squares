Problem Description
Given an integer A. Return minimum count of numbers, sum of whose squares is equal to A.

Problem Constraints
1 <= A <= 105

Approach: First reject greedy. Why? Because subtracting the largest number is not always best. A=12==> 12-9=3==>3-1=2==>2-1=1==>1-1=0.Ans=4
                                                                                                       12-4=8=>8-4=4==>4-4=0 Ans=3
Suppose A=6. Then 1+min(ways(5),ways(4)) Then For ways(5)==>1+min(ways(4),ways(1)). And this goes on.

Recursive
int ways(int A){
    if(A==0){
        return 0;
    }
    if(A==1){
        return 1;
    }
    int minn=INT_MAX;
    for(int i=1;i*i<=A;i++){
        minn=min(minn,1+ways(A-i*i));
    }
    return minn;
}

int Solution::countMinSquares(int A) {
    return ways(A);
}

Memoization

int solve(vector<int>&dp,int A){
     if(A<=0){
        return 0;
    }
    if(A==1){
        return 1;
    }
    if(dp[A]==INT_MAX){
      for(int i=1;i*i<=A;i++){
        dp[A]=min(dp[A],1+solve(dp,A-(i*i)));
     }
    }
    return dp[A];
}

int Solution::countMinSquares(int A) {
vector<int>dp(A+1,INT_MAX);
return solve(dp,A);   
}

Bottom Up

int Solution::countMinSquares(int A) {
    vector<int>dp(A+1,INT_MAX);
    dp[0]=0;
    dp[1]=1;
    int i,j;
    for(i=2;i<=A;i++){
        dp[i]=i;
        for(j=1;j*j<=i;j++){
            dp[i]=min(dp[i],1+dp[i-j*j]);
        }
    }
    return dp[A];
}
