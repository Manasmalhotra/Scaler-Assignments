Problem Description
Given a string A. Find the rank of the string amongst its permutations sorted lexicographically.
Assume that no characters are repeated.

Note: The answer might not fit in an integer, so return your answer % 1000003



Problem Constraints
1 <= |A| <= 1000



Input Format
First argument is a string A.



Output Format
Return an integer denoting the rank of the given string.

before te desired letter
Approach: To find the rank of a word, all the the letters coming before the desired letter will give the permutations before the required arrangement.

TC:O(N^2)
int Solution::findRank(string A) {
    int i,j,n=A.length(),count=0;
    long factorial[n+1];
    factorial[0]=1;
    for(i=1;i<=n;i++){
        factorial[i]=(factorial[i-1]*i)%1000003;
    }

    long ans=0;

    for(i=0;i<n;i++){
        count=0;
        for(j=i+1;j<n;j++){
            if(A[j]<A[i]){
                count+=1;
            }
        }
        ans=(ans+(count*factorial[n-1-i])%1000003)%1000003;
    }
    return ans+1;
}

Best Approach: We can find number of letters before the required letter through distance function.
TC:O(N) SC:O(N)

int Solution::findRank(string A) {
    int i,j,n=A.length(),count=0;
    long factorial[n+1],ans=0;
    factorial[0]=1;

    for(i=1;i<=n;i++){
        factorial[i]=(factorial[i-1]*i)%1000003;
    }

    map<int,int>maps;
    for(i=0;i<n;i++){
        maps[A[i]]+=1;
    }

    for(i=0;i<n;i++){
        int c=distance(maps.begin(),maps.find(A[i]));
        maps.erase(A[i]);
        ans=(ans%1000003+(c*factorial[n-i-1])%1000003)%1000003;
    }
    return ans+1;
}
