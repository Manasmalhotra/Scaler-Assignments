TC:O(N*M) SC:O(1)

Approach : the bottom right element will be  the maximum element of the array and so it needs tobe included in the max sum anyhow, so we have an end point for our
matrix,now traverse the matrix by ficxing each (i,j) as top left corner.

suppose mat:
-5 -4 -3
-4 -3 -2
 4  5  6
 
Here submatrix starting at (2,0) to 2,2 gives ans.
 
-5 -4 -3
-4 -3 -2
-4 -2 -1
 
Here matrix[2][2]=-1 is the answer as all elements are negative.
TC:O(N*M)
SC:O(1)

long Solution::solve(vector<vector<int> > &A) {
int i,j,n=A.size(),m=A[0].size();
vector<vector<long> >mat(n,vector<long>(m,0));

for(i=0;i<n;i++){
    for(j=0;j<m;j++){
       if(j==0){
           mat[i][j]=A[i][j];
       }
       else{
           mat[i][j]=A[i][j]+mat[i][j-1];
       }
    }
}

for(j=0;j<m;j++){
    for(i=0;i<n;i++){
        if(i!=0){
            mat[i][j]+=mat[i-1][j];
        }
    }
}
long maxx=INT_MIN,sum=0;

for(i=0;i<n;i++){
    for(j=0;j<m;j++){
        sum=mat[n-1][m-1];
        if(i-1>=0 && j-1>=0){
            sum+=mat[i-1][j-1];
        }
        if(j-1>=0){
            sum-=mat[n-1][j-1];
        }
        if(i-1>=0){
            sum-=mat[i-1][m-1];
        }
        maxx=max(maxx,sum);
    }
}
return maxx;
}
