Q1. Rain Water Trapped

Problem Description
Given a vector A of non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

Problem Constraints
1 <= |A| <= 100000

Input Format
First and only argument is the vector A

Output Format
Return one integer, the answer to the question

Approach: Support from both the sides( i.e buildings greater than height of current building) are required to trap the water, otherwise it will flow out from the other side.
          Now when we get support from each side. We are assuming water gets stored in form of blocks of extra height.
          
Brute Force: For each building traverse left and get maximum suport on leftside. Then traverse right and get maximum support on right side.
             Then take minimum of leftmax and rightmax ,subtract this from buildings height to get space available for water.
             TC: O(N^2) SC:O(1)
             
 
Better approach: Maintain leftmax and rightmax for each index

TC:O(N) SC:O(N)

int Solution::trap(const vector<int> &A) {
    int i,n=A.size();
    int leftmax[n],rightmax[n];
    leftmax[0]=A[0];
    rightmax[n-1]=A[n-1];
    for(i=1;i<n;i++){
        leftmax[i]=max(leftmax[i-1],A[i]);
    }
    for(i=n-2;i>=0;i--){
        rightmax[i]=max(rightmax[i+1],A[i]);
    }

    int water=0,support=0,height_w;
    
    for(i=1;i<n-1;i++){
        support=min(leftmax[i-1],rightmax[i+1]);
        height_w=max(0,support-A[i]);
        water+=height_w;
    }
    return water;
}

BEST: 
Approach: Compare arr[left] and arr[right], now the one which is less has the support from the other side.Now just check if this height is not maximum on its side so as to ensure support from the same side as well.
TC: O(N) SC:O(1)
int Solution::trap(const vector<int> &A) {
    int i,n=A.size();
    int left=0,right=n-1;
    int left_max=0,right_max=0,ans=0;
    while(left<right){
        if(A[left]<A[right]){
            if(A[left]>=left_max){
                left_max=A[left];
            }
            else{
                ans+=left_max-A[left];
            }
            left++;
        }
        else{
            if(A[right]>=right_max){
                right_max=A[right];
            }
            else{
                ans+=right_max-A[right];
            }
            right--;
        }
    }
    return ans;
}
