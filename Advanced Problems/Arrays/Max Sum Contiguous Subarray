Problem Description
Find the contiguous non-empty subarray within an array, A of length N, with the largest sum.



Problem Constraints
1 <= N <= 1e6
-1000 <= A[i] <= 1000



Input Format
The first and the only argument contains an integer array, A.



Output Format
Return an integer representing the maximum possible sum of the contiguous subarray.


Solution

Brute force 

Get sum for all subarrays and get max.

int sum=0,maxx=INT_MIN,i,j,n=arr.size();
for(i=0;i<n;i++){
sum=0;
for(j=i;j<n;j++){
sum+=arr[j];
maxx=max(maxx,sum);
}
}
return maxx;

Approach: You want to include all portions of the array that gives you net positive result. But as sum<0 you want to start afresh from 0.
KADANE ALGORITHM

TC: O(N) SC:O(1)

int Solution::maxSubArray(const vector<int> &A) {
    int i,n=A.size(),sum=0,maxx=INT_MIN;
    for(i=0;i<n;i++){
        sum+=A[i];
        if(sum>maxx){
            maxx=sum;
        }
        if(sum<0){
            sum=0;
        }
    }
    return maxx;
}
