Problem Description
You are given a binary string A(i.e., with characters 0 and 1) consisting of characters A1, A2, ..., AN. In a single operation, you can choose two indices, L and R, such that 1 ≤ L ≤ R ≤ N and flip the characters AL, AL+1, ..., AR. By flipping, we mean changing character 0 to 1 and vice-versa.

Your aim is to perform ATMOST one operation such that in the final string number of 1s is maximized.

If you don't want to perform the operation, return an empty array. Else, return an array consisting of two elements denoting L and R. If there are multiple solutions, return the lexicographically smallest pair of L and R.

NOTE: Pair (a, b) is lexicographically smaller than pair (c, d) if a < c or, if a == c and b < d.



Problem Constraints
1 <= size of string <= 100000



Input Format
First and only argument is a string A.



Output Format
Return an array of integers denoting the answer.

Approach: If sum anytime becomes negative that means in that subarray 1 dominates and hence no benefit is there in flipping the array. We maintain the maximum sum and left and right indices to store the subarray required.

Ex: 1 0 1 0 1 1 0 0 0
At index=0 we can say that 1 occurs so sum=-1. Thus no need to include this index. update index=i+1.
At index=1 we have a 0 and thus sum =1. It is greater than current maxx therefore store this. Now index=2 sum=0, continue. then sum=1,continue. then sum=-1 reset sum value. then sum=-2,reset sum value and index=i+1. 
Now index=6 and sum=1. then sum=2 so right=7. then sum=3 so right=8 . Thus flipping array from 6 to 8 indices will gigive us max 1s in array because these are all0s and in rest of the array 1 dominates already.

vector<int> Solution::flip(string A) {
    int i,n=A.length(),sum=0,index=0,left=0,right=-1,maxx=0;
    for(i=0;i<n;i++){
        if(A[i]=='0'){
            sum++;
        }
        else{
            sum--;
        }
        if(sum<0){
            sum=0;
            index=i+1;
        }
        if(sum>maxx){
            left=index;
            right=i;
            maxx=sum;
        }
    }
    vector<int>result;
    if(right==-1){
        return result;
    }
    else{
        result.push_back(left+1);
        result.push_back(right+1);
        return result;
    }
}
