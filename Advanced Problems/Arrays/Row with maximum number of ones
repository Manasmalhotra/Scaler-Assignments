Problem Description

Given a binary sorted matrix A of size N x N. Find the row with the maximum number of 1.

NOTE:

If two rows have the maximum number of 1 then return the row which has a lower index.
Rows are numbered from top to bottom and columns are numbered from left to right.
Assume 0-based indexing.
Assume each row to be sorted by values.
Expected time complexity is O(rows).


Problem Constraints

1 <= N <= 1000

0 <= A[i] <= 1

 Approach: Go till you are getting 1 else jump to next row and see if there is a one on previous column if it is j-- this works bcoz array is sorted.
 TC:O(N+M) SC:O(1)
 
int Solution::solve(vector<vector<int> > &A) {
    int i=0,j=A.size()-1,n=A.size(),row=0;
    while(i<n && j>=0){
        if(A[i][j]==1){
            row=i;
            j--;
        }
        else{
            i++;
        }
    }
    return row;   
}
