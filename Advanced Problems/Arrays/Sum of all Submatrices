Problem Description
Given a 2D Matrix A of dimensions N*N, we need to return the sum of all possible submatrices.

Problem Constraints
1 <= N <=30

0 <= A[i][j] <= 10

Input Format
Single argument representing a 2-D array A of size N x N.

Output Format
Return an integer denoting the sum of all possible submatrices in the given matrix.

Mat[6][6]
1 2 3 4 5 6
7 8 9 10 11 12
13 14 15 16 17 18
19 20 21 22 23 24 
25 26 27 28 29 30
31 32 33 34 35 36

Approach 1: Use Brute force algorithm to iterate through each submatrix possible.
TC:O(N^6)

{
int i,j,k,t,y,w,sum=0,n=mat.size(),m=mat[0].size();

for(i=0;i<n;i++){
for(j=0;j<m;j++){
for(k=i;k<n;k++){
for(t=j;t<m;t++){
for(y=i;y<=k;y++){
for(w=j;w<=t;w++){
sum+=mat[y][w];
}}}}}}
return sum;
}

Approach2: Use prefix array to avoid the need to iterate the submatrix once the boundaries are fixed.
TC:O(N^4) SC:O(1) incase you are allowed to modfy given arrya else O(N^2).

int prefix_sum(int x1,int y1,int x2,int y2,vector<vector<int> >&mat){
int sum=0;
sum+=mat[x2][y2];
sum-=mat[x2][y1-1];
sum-=mat[x1-1][y2]
sum+=mat[x1-1][y1-1];
return sum;
}

int i,j,k,t,y,w,sum=0,n=mat.size(),m=mat[0].size();

for(i=0;i<n;i++){
 for(j=0;j<m;j++){
  if(j!=0){
    mat[i][j]=mat[i][j-1]+mat[i][j];
    }
   }
 }
 
for(j=0;j<m;j++){
 for(i=0;i<n;i++){
  if(i!=0){
   mat[i][j]+=mat[i-1][j];
  }
 }
}

for(i=0;i<n;i++){
for(j=0;j<m;j++){
for(k=i;k<n;k++){
for(t=j;t<m;t++){
sum+=prefix_sum(i,j,k,t,mat);
}}}}}}
return sum;


Approach 3: Contribution Technique. Find number of submatrices in which an element occurs, same as the question sum of all subarrays.


Mat[6][6]
1 2 3 4 5 6
7 8 9 10 11 12
13 14 15 16 17 18
19 20 21 22 23 24 
25 26 27 28 29 30
31 32 33 34 35 36

say we need to add contribution of 9.
Then for 9 : 1,2,3,7,8,9 can be top left of submatrices containing 9.
             9 to 36 numbers can be the bottom right corner of the matrices possible.

Therefore number of submatrices: LR:(i+1)*(j+1) BR: (n-i)*(m-j) =LR*BR=(i+1)*(j+1)*(n-i)*(n-j)

int Solution::solve(vector<vector<int> > &A) {
int i,j,n=A.size(),m=A[0].size(),sum=0;
for(i=0;i<n;i++){
    for(j=0;j<m;j++){
        sum+=A[i][j]*(i+1)*(j+1)*(n-i)*(m-j);
    }
}
return sum;
}

