Problem Description

Given a matrix of integers A of size N x M and an integer B.
In the given matrix every row and column is sorted in increasing order. Find and return the position of B in the matrix in the given form:
If A[i][j] = B then return (i * 1009 + j)
If B is not present return -1.

Note 1: Rows are numbered from top to bottom and columns are numbered from left to right.
Note 2: If there are multiple B in A then return the smallest value of i*1009 +j such that A[i][j]=B.

Problem Constraints

1 <= N, M <= 1000
-100000 <= A[i] <= 100000
-100000 <= B <= 100000

Input Format

The first argument given is the integer matrix A.
The second argument given is the integer B.

Output Format

Return the position of B and if it is not present in A return -1 instead.


mat[][]= 1 2 5
         2 4 6
         
Matrix need not be in order that value of last col of previous row< first element of next row.

Brute Force: Search in array the element. TC:O(N*M).SC:O(1)

TC: O(N+M) SC:O(1)
Approach: If the element to be found is greater than the last element of the row that means it cannot be present in previous coluns as each row is sorted.
If the element tobe found is smaller than the last column element we need to decrement column as it may be present in previous colums.


int Solution::solve(vector<vector<int> > &A, int B) {
    int n=A.size(),m=A[0].size(),minn=INT_MAX;
    int i=0,j=m-1;
    while(i<n && j>=0){
        if(A[i][j]>B){
            j--;
        }
        else if(A[i][j]<B){
            i++;
        }
        else{
            minn=min(minn,((i+1)*1009)+(j+1));
            if(A[i][j-1]==B){
                j--;
            }
            else{
                break;
            }
        }
    }
    if(minn==INT_MAX){
        return -1;
    }
    return minn;
}
