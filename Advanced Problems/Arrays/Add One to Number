Problem Description
Given a non-negative number represented as an array of digits, add 1 to the number ( increment the number represented by the digits ).

The digits are stored such that the most significant digit is at the head of the list.

NOTE: Certain things are intentionally left unclear in this question which you should practice asking the interviewer. For example: for this problem, the following are some good questions to ask :

Q: Can the input have 0's before the most significant digit. Or, in other words, is 0 1 2 3 a valid input?
A: For the purpose of this question, YES
Q: Can the output have 0's before the most significant digit? Or, in other words, is 0 1 2 4 a valid output?
A: For the purpose of this question, NO. Even if the input has zeroes before the most significant digit.

Problem Constraints
1 <= size of the array <= 1000000

Input Format
First argument is an array of digits.

Output Format
Return the array of digits after adding one.

Approach: 124 +1 so we start from n-1 as this is the way a addition is performed. Also the first for loop is to skip any extra zeros before actual number.

Case 1: TC: O(N) SC:O(N)

vector<int> Solution::plusOne(vector<int> &A) {
    vector<int>result;
    int i,n=A.size(),carry=1,res=0,j;
    
    for(j=0;j<n;j++){
        if(A[j]!=0){
            break;
        }
    }
    for(i=n-1;i>=j;i--){
        res=(A[i]+carry)%10;
        carry=(A[i]+carry)/10;
        result.push_back(res);
    }
    if(carry>0){
        result.push_back(carry);
    }
    reverse(result.begin(),result.end());
    return result;
}

Case 2: TC:O(N) SC:O(1)

vector<int> Solution::plusOne(vector<int> &A) {
    int i,n=A.size(),carry=1;
    reverse(A.begin(),A.end());
    for(i=0;i<n;i++){
        A[i]=A[i]+carry;
        carry=A[i]/10;
        A[i]%=10;
    }
    if(carry>0){
        A.push_back(carry);
    }
    while(A[A.size()-1]==0 && A.size()>1){
        A.pop_back();
    }
    reverse(A.begin(),A.end());
    return A;
}
