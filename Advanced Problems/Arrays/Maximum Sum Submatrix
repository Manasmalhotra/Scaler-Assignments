Problem Description
Given a N * M 2D matrix A. Find the maximum sum sub-matrix from the matrix A. Return the Sum.


Problem Constraints
1 <= N, M <= 300
-104 <= A[i][j] <= 104

Input Format
The first argument is a 2D Integer array A.


Output Format
Return the sum of the maximum sum sub-matrix from matrix A.

TC: O(M^2*N) SC:O(N*M)
Approach: Kadane's Algorithm

|1 2| 3 4 5                       1 3
|6 7| 8 9 10            =====>    6 13       ====> Now apply kadanes on the 2nd column we get max subarray sum as 43.
|11 12| 13 14 15                  11 23
|16 17| 18 19 20                  16 33
|21 22| 23 24 25                  21 43

Approach is to first get prefix sum of columns for each of the rows. Now fix starting and ending columns and calculate sum for the particular row through prefix sum 
approach and insert this value in a vector for each row. Now get maximum subarray sum to get the max posible consecutive sum.

int kadane(vector<int>&arr){
    int i,n=arr.size(),sum=0,maxx=INT_MIN;
    for(i=0;i<n;i++){
        sum+=arr[i];
        if(maxx<sum){
            maxx=sum;
        }
        if(sum<0){
            sum=0;
        }
    }
    return maxx;
}
int Solution::solve(vector<vector<int> > &A) {
    int i,j,n=A.size(),m=A[0].size();
    for(i=0;i<n;i++){
        for(j=0;j<m;j++){
            if(j!=0){
                A[i][j]=A[i][j]+A[i][j-1];
            }
        }
    }
    int k,maxx=INT_MIN,sum;
    for(j=0;j<m;j++){
        for(k=j;k<m;k++){
            vector<int>res;
            for(i=0;i<n;i++){
                if(j==0){
                    sum=A[i][k];
                }
                else{
                    sum=A[i][k]-A[i][j-1];
                }
                res.push_back(sum);
            }
            maxx=max(maxx,kadane(res));
        }
    }
   return maxx;
}
