Problem Description
Given a 2D integer matrix A of size N x N, find a B x B submatrix where B<= N and B>= 1, such that the sum of all the elements in the submatrix is maximum.



Problem Constraints
1 <= N <= 103.

1 <= B <= N

-102 <= A[i][j] <= 102.

TC:O(N*M) SC:O(N*M)
Approach: Traverse the matrix and get each B*B matrix by fixing the LR and BR corners.

Input Format
First arguement is an 2D integer matrix A.

Second argument is an integer B.



Output Format
Return a single integer denoting the maximum sum of submatrix of size B x B.

int Solution::solve(vector<vector<int> > &A, int B) {
    int i,j,n=A.size();
    vector<vector<int> >prefix(n,vector<int>(n,0));
    for(i=0;i<n;i++){
      for(j=0;j<n;j++){
          if(j==0){
              prefix[i][j]=A[i][j];
          }
          else{
              prefix[i][j]=prefix[i][j-1]+A[i][j];
          }
      }
    }

        for(j=0;j<n;j++){
            for(i=0;i<n;i++){
            if(i==0){
              prefix[i][j]=prefix[i][j];
            }
            else{
              prefix[i][j]+=prefix[i-1][j];
            }
        }
    }
int sum=0,maxx=INT_MIN,x2,y2;

for(i=0;i<n;i++){
    for(j=0;j<n;j++){
        
        x2=i+B-1;
        y2=j+B-1;

        if(x2>=n || y2>=n){
            continue;
        }
        sum+=prefix[x2][y2];

        if(i-1>=0 && j-1>=0){
            sum+=prefix[i-1][j-1];
        }
        if(i-1>=0){
            sum-=prefix[i-1][y2];
        }
        if(j-1>=0){
            sum-=prefix[x2][j-1];
        }
        maxx=max(maxx,sum);
        sum=0;
    }
}

return maxx;
}
