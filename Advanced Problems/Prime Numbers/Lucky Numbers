Problem Description
A lucky number is a number that has exactly 2 distinct prime divisors.

You are given a number A, and you need to determine the count of lucky numbers between the range 1 to A (both inclusive).

Approach: 
Brute Force: For i=1 to A iterate, find their divsors in sqrt time and check if these are prime numbers.
A*sqrt(A)*sqrt(A) ==> Another sqrt(A) is for checking the prime number.

int Solution::solve(int A) {
    int i,j;
    vector<int>factors(A+1,0);

    for(i=2;i<=A;i++){
       if(factors[i]==0){
        for(j=(2*i);j<=A;j+=i){
           factors[j]+=1;    
        }
      }
    }

    int count=0;
    for(i=1;i<=A;i++){
        if(factors[i]==2){
            count+=1;
        }
    }
    return count;
}
